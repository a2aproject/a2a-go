// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: a2a.proto

package a2apb

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The set of states a Task can be in.
type TaskState int32

const (
	TASK_STATE_UNSPECIFIED TaskState = 0
	// Represents the status that acknowledges a task is created
	TASK_STATE_SUBMITTED TaskState = 1
	// Represents the status that a task is actively being processed
	TASK_STATE_WORKING TaskState = 2
	// Represents the status a task is finished. This is a terminal state
	TASK_STATE_COMPLETED TaskState = 3
	// Represents the status a task is done but failed. This is a terminal state
	TASK_STATE_FAILED TaskState = 4
	// Represents the status a task was cancelled before it finished.
	// This is a terminal state.
	TASK_STATE_CANCELLED TaskState = 5
	// Represents the status that the task requires information to complete.
	// This is an interrupted state.
	TASK_STATE_INPUT_REQUIRED TaskState = 6
	// Represents the status that the agent has decided to not perform the task.
	// This may be done during initial task creation or later once an agent
	// has determined it can't or won't proceed. This is a terminal state.
	TASK_STATE_REJECTED TaskState = 7
	// Represents the state that some authentication is needed from the upstream
	// client. Authentication is expected to come out-of-band thus this is not
	// an interrupted or terminal state.
	TASK_STATE_AUTH_REQUIRED TaskState = 8
)

var TaskState_name = map[int32]string{
	0: "TASK_STATE_UNSPECIFIED",
	1: "TASK_STATE_SUBMITTED",
	2: "TASK_STATE_WORKING",
	3: "TASK_STATE_COMPLETED",
	4: "TASK_STATE_FAILED",
	5: "TASK_STATE_CANCELLED",
	6: "TASK_STATE_INPUT_REQUIRED",
	7: "TASK_STATE_REJECTED",
	8: "TASK_STATE_AUTH_REQUIRED",
}

var TaskState_value = map[string]int32{
	"TASK_STATE_UNSPECIFIED":    0,
	"TASK_STATE_SUBMITTED":      1,
	"TASK_STATE_WORKING":        2,
	"TASK_STATE_COMPLETED":      3,
	"TASK_STATE_FAILED":         4,
	"TASK_STATE_CANCELLED":      5,
	"TASK_STATE_INPUT_REQUIRED": 6,
	"TASK_STATE_REJECTED":       7,
	"TASK_STATE_AUTH_REQUIRED":  8,
}

func (TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{0}
}

type Role int32

const (
	ROLE_UNSPECIFIED Role = 0
	// USER role refers to communication from the client to the server.
	ROLE_USER Role = 1
	// AGENT role refers to communication from the server to the client.
	ROLE_AGENT Role = 2
)

var Role_name = map[int32]string{
	0: "ROLE_UNSPECIFIED",
	1: "ROLE_USER",
	2: "ROLE_AGENT",
}

var Role_value = map[string]int32{
	"ROLE_UNSPECIFIED": 0,
	"ROLE_USER":        1,
	"ROLE_AGENT":       2,
}

func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{1}
}

// Configuration of a send message request.
type SendMessageConfiguration struct {
	// The output modes that the agent is expected to respond with.
	AcceptedOutputModes []string `protobuf:"bytes,1,rep,name=accepted_output_modes,json=acceptedOutputModes,proto3" json:"accepted_output_modes,omitempty"`
	// A configuration of a webhook that can be used to receive updates
	PushNotification *PushNotificationConfig `protobuf:"bytes,2,opt,name=push_notification,json=pushNotification,proto3" json:"push_notification,omitempty"`
	// The maximum number of messages to include in the history. if 0, the
	// history will be unlimited.
	HistoryLength int32 `protobuf:"varint,3,opt,name=history_length,json=historyLength,proto3" json:"history_length,omitempty"`
	// If true, the message will be blocking until the task is completed. If
	// false, the message will be non-blocking and the task will be returned
	// immediately. It is the caller's responsibility to check for any task
	// updates.
	Blocking bool `protobuf:"varint,4,opt,name=blocking,proto3" json:"blocking,omitempty"`
}

func (m *SendMessageConfiguration) Reset()      { *m = SendMessageConfiguration{} }
func (*SendMessageConfiguration) ProtoMessage() {}
func (*SendMessageConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{0}
}
func (m *SendMessageConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMessageConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMessageConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMessageConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageConfiguration.Merge(m, src)
}
func (m *SendMessageConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *SendMessageConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageConfiguration proto.InternalMessageInfo

func (m *SendMessageConfiguration) GetAcceptedOutputModes() []string {
	if m != nil {
		return m.AcceptedOutputModes
	}
	return nil
}

func (m *SendMessageConfiguration) GetPushNotification() *PushNotificationConfig {
	if m != nil {
		return m.PushNotification
	}
	return nil
}

func (m *SendMessageConfiguration) GetHistoryLength() int32 {
	if m != nil {
		return m.HistoryLength
	}
	return 0
}

func (m *SendMessageConfiguration) GetBlocking() bool {
	if m != nil {
		return m.Blocking
	}
	return false
}

// Task is the core unit of action for A2A. It has a current status
// and when results are created for the task they are stored in the
// artifact. If there are multiple turns for a task, these are stored in
// history.
type Task struct {
	// Unique identifier for a task, created by the A2A server.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique identifier for the contextual collection of interactions (tasks
	// and messages). Created by the A2A server.
	ContextId string `protobuf:"bytes,2,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// The current status of a Task, including state and a message.
	Status *TaskStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// A set of output artifacts for a Task.
	Artifacts []*Artifact `protobuf:"bytes,4,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// protolint:disable REPEATED_FIELD_NAMES_PLURALIZED
	// The history of interactions from a task.
	History []*Message `protobuf:"bytes,5,rep,name=history,proto3" json:"history,omitempty"`
	// protolint:enable REPEATED_FIELD_NAMES_PLURALIZED
	// A key/value object to store custom metadata about a task.
	Metadata *structpb.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *Task) Reset()      { *m = Task{} }
func (*Task) ProtoMessage() {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{1}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *Task) GetStatus() *TaskStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Task) GetArtifacts() []*Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func (m *Task) GetHistory() []*Message {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *Task) GetMetadata() *structpb.Struct {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// A container for the status of a task
type TaskStatus struct {
	// The current state of this task
	State TaskState `protobuf:"varint,1,opt,name=state,proto3,enum=a2a.v1.TaskState" json:"state,omitempty"`
	// A message associated with the status.
	Update *Message `protobuf:"bytes,2,opt,name=update,json=message,proto3" json:"update,omitempty"`
	// Timestamp when the status was recorded.
	// Example: "2023-10-27T10:00:00Z"
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TaskStatus) Reset()      { *m = TaskStatus{} }
func (*TaskStatus) ProtoMessage() {}
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{2}
}
func (m *TaskStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStatus.Merge(m, src)
}
func (m *TaskStatus) XXX_Size() int {
	return m.Size()
}
func (m *TaskStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStatus proto.InternalMessageInfo

func (m *TaskStatus) GetState() TaskState {
	if m != nil {
		return m.State
	}
	return TASK_STATE_UNSPECIFIED
}

func (m *TaskStatus) GetUpdate() *Message {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *TaskStatus) GetTimestamp() *timestamppb.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// Part represents a container for a section of communication content.
// Parts can be purely textual, some sort of file (image, video, etc) or
// a structured data blob (i.e. JSON).
type Part struct {
	// Types that are valid to be assigned to Part:
	//	*Part_Text
	//	*Part_File
	//	*Part_Data
	Part isPart_Part `protobuf_oneof:"part"`
}

func (m *Part) Reset()      { *m = Part{} }
func (*Part) ProtoMessage() {}
func (*Part) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{3}
}
func (m *Part) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Part) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Part.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Part) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Part.Merge(m, src)
}
func (m *Part) XXX_Size() int {
	return m.Size()
}
func (m *Part) XXX_DiscardUnknown() {
	xxx_messageInfo_Part.DiscardUnknown(m)
}

var xxx_messageInfo_Part proto.InternalMessageInfo

type isPart_Part interface {
	isPart_Part()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Part_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
}
type Part_File struct {
	File *FilePart `protobuf:"bytes,2,opt,name=file,proto3,oneof" json:"file,omitempty"`
}
type Part_Data struct {
	Data *DataPart `protobuf:"bytes,3,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (*Part_Text) isPart_Part() {}
func (*Part_File) isPart_Part() {}
func (*Part_Data) isPart_Part() {}

func (m *Part) GetPart() isPart_Part {
	if m != nil {
		return m.Part
	}
	return nil
}

func (m *Part) GetText() string {
	if x, ok := m.GetPart().(*Part_Text); ok {
		return x.Text
	}
	return ""
}

func (m *Part) GetFile() *FilePart {
	if x, ok := m.GetPart().(*Part_File); ok {
		return x.File
	}
	return nil
}

func (m *Part) GetData() *DataPart {
	if x, ok := m.GetPart().(*Part_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Part) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Part_Text)(nil),
		(*Part_File)(nil),
		(*Part_Data)(nil),
	}
}

// FilePart represents the different ways files can be provided. If files are
// small, directly feeding the bytes is supported via file_with_bytes. If the
// file is large, the agent should read the content as appropriate directly
// from the file_with_uri source.
type FilePart struct {
	// Types that are valid to be assigned to File:
	//	*FilePart_FileWithUri
	//	*FilePart_FileWithBytes
	File     isFilePart_File `protobuf_oneof:"file"`
	MimeType string          `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
}

func (m *FilePart) Reset()      { *m = FilePart{} }
func (*FilePart) ProtoMessage() {}
func (*FilePart) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{4}
}
func (m *FilePart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FilePart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FilePart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FilePart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilePart.Merge(m, src)
}
func (m *FilePart) XXX_Size() int {
	return m.Size()
}
func (m *FilePart) XXX_DiscardUnknown() {
	xxx_messageInfo_FilePart.DiscardUnknown(m)
}

var xxx_messageInfo_FilePart proto.InternalMessageInfo

type isFilePart_File interface {
	isFilePart_File()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type FilePart_FileWithUri struct {
	FileWithUri string `protobuf:"bytes,1,opt,name=file_with_uri,json=fileWithUri,proto3,oneof" json:"file_with_uri,omitempty"`
}
type FilePart_FileWithBytes struct {
	FileWithBytes []byte `protobuf:"bytes,2,opt,name=file_with_bytes,json=fileWithBytes,proto3,oneof" json:"file_with_bytes,omitempty"`
}

func (*FilePart_FileWithUri) isFilePart_File()   {}
func (*FilePart_FileWithBytes) isFilePart_File() {}

func (m *FilePart) GetFile() isFilePart_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *FilePart) GetFileWithUri() string {
	if x, ok := m.GetFile().(*FilePart_FileWithUri); ok {
		return x.FileWithUri
	}
	return ""
}

func (m *FilePart) GetFileWithBytes() []byte {
	if x, ok := m.GetFile().(*FilePart_FileWithBytes); ok {
		return x.FileWithBytes
	}
	return nil
}

func (m *FilePart) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FilePart) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FilePart_FileWithUri)(nil),
		(*FilePart_FileWithBytes)(nil),
	}
}

// DataPart represents a structured blob. This is most commonly a JSON payload.
type DataPart struct {
	Data *structpb.Struct `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DataPart) Reset()      { *m = DataPart{} }
func (*DataPart) ProtoMessage() {}
func (*DataPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{5}
}
func (m *DataPart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataPart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPart.Merge(m, src)
}
func (m *DataPart) XXX_Size() int {
	return m.Size()
}
func (m *DataPart) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPart.DiscardUnknown(m)
}

var xxx_messageInfo_DataPart proto.InternalMessageInfo

func (m *DataPart) GetData() *structpb.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

// Message is one unit of communication between client and server. It is
// associated with a context and optionally a task. Since the server is
// responsible for the context definition, it must always provide a context_id
// in its messages. The client can optionally provide the context_id if it
// knows the context to associate the message to. Similarly for task_id,
// except the server decides if a task is created and whether to include the
// task_id.
type Message struct {
	// The message id of the message. This is required and created by the
	// message creator.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The context id of the message. This is optional and if set, the message
	// will be associated with the given context.
	ContextId string `protobuf:"bytes,2,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// The task id of the message. This is optional and if set, the message
	// will be associated with the given task.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// A role for the message.
	Role Role `protobuf:"varint,4,opt,name=role,proto3,enum=a2a.v1.Role" json:"role,omitempty"`
	// protolint:disable REPEATED_FIELD_NAMES_PLURALIZED
	// Content is the container of the message content.
	Content []*Part `protobuf:"bytes,5,rep,name=content,proto3" json:"content,omitempty"`
	// protolint:enable REPEATED_FIELD_NAMES_PLURALIZED
	// Any optional metadata to provide along with the message.
	Metadata *structpb.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The URIs of extensions that are present or contributed to this Message.
	Extensions []string `protobuf:"bytes,7,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{6}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *Message) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *Message) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *Message) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return ROLE_UNSPECIFIED
}

func (m *Message) GetContent() []*Part {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetMetadata() *structpb.Struct {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Message) GetExtensions() []string {
	if m != nil {
		return m.Extensions
	}
	return nil
}

// Artifacts are the container for task completed results. These are similar
// to Messages but are intended to be the product of a task, as opposed to
// point-to-point communication.
type Artifact struct {
	// Unique id for the artifact. It must be at least unique within a task.
	ArtifactId string `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// A human readable name for the artifact.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// A human readable description of the artifact, optional.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The content of the artifact.
	Parts []*Part `protobuf:"bytes,5,rep,name=parts,proto3" json:"parts,omitempty"`
	// Optional metadata included with the artifact.
	Metadata *structpb.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The URIs of extensions that are present or contributed to this Artifact.
	Extensions []string `protobuf:"bytes,7,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (m *Artifact) Reset()      { *m = Artifact{} }
func (*Artifact) ProtoMessage() {}
func (*Artifact) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{7}
}
func (m *Artifact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Artifact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Artifact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Artifact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Artifact.Merge(m, src)
}
func (m *Artifact) XXX_Size() int {
	return m.Size()
}
func (m *Artifact) XXX_DiscardUnknown() {
	xxx_messageInfo_Artifact.DiscardUnknown(m)
}

var xxx_messageInfo_Artifact proto.InternalMessageInfo

func (m *Artifact) GetArtifactId() string {
	if m != nil {
		return m.ArtifactId
	}
	return ""
}

func (m *Artifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Artifact) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Artifact) GetParts() []*Part {
	if m != nil {
		return m.Parts
	}
	return nil
}

func (m *Artifact) GetMetadata() *structpb.Struct {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Artifact) GetExtensions() []string {
	if m != nil {
		return m.Extensions
	}
	return nil
}

// TaskStatusUpdateEvent is a delta even on a task indicating that a task
// has changed.
type TaskStatusUpdateEvent struct {
	// The id of the task that is changed
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The id of the context that the task belongs to
	ContextId string `protobuf:"bytes,2,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// The new status of the task.
	Status *TaskStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Whether this is the last status update expected for this task.
	Final bool `protobuf:"varint,4,opt,name=final,proto3" json:"final,omitempty"`
	// Optional metadata to associate with the task update.
	Metadata *structpb.Struct `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *TaskStatusUpdateEvent) Reset()      { *m = TaskStatusUpdateEvent{} }
func (*TaskStatusUpdateEvent) ProtoMessage() {}
func (*TaskStatusUpdateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{8}
}
func (m *TaskStatusUpdateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskStatusUpdateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskStatusUpdateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskStatusUpdateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskStatusUpdateEvent.Merge(m, src)
}
func (m *TaskStatusUpdateEvent) XXX_Size() int {
	return m.Size()
}
func (m *TaskStatusUpdateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskStatusUpdateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TaskStatusUpdateEvent proto.InternalMessageInfo

func (m *TaskStatusUpdateEvent) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskStatusUpdateEvent) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *TaskStatusUpdateEvent) GetStatus() *TaskStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TaskStatusUpdateEvent) GetFinal() bool {
	if m != nil {
		return m.Final
	}
	return false
}

func (m *TaskStatusUpdateEvent) GetMetadata() *structpb.Struct {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// TaskArtifactUpdateEvent represents a task delta where an artifact has
// been generated.
type TaskArtifactUpdateEvent struct {
	// The id of the task for this artifact
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The id of the context that this task belongs too
	ContextId string `protobuf:"bytes,2,opt,name=context_id,json=contextId,proto3" json:"context_id,omitempty"`
	// The artifact itself
	Artifact *Artifact `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// Whether this should be appended to a prior one produced
	Append bool `protobuf:"varint,4,opt,name=append,proto3" json:"append,omitempty"`
	// Whether this represents the last part of an artifact
	LastChunk bool `protobuf:"varint,5,opt,name=last_chunk,json=lastChunk,proto3" json:"last_chunk,omitempty"`
	// Optional metadata associated with the artifact update.
	Metadata *structpb.Struct `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *TaskArtifactUpdateEvent) Reset()      { *m = TaskArtifactUpdateEvent{} }
func (*TaskArtifactUpdateEvent) ProtoMessage() {}
func (*TaskArtifactUpdateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{9}
}
func (m *TaskArtifactUpdateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskArtifactUpdateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskArtifactUpdateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskArtifactUpdateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskArtifactUpdateEvent.Merge(m, src)
}
func (m *TaskArtifactUpdateEvent) XXX_Size() int {
	return m.Size()
}
func (m *TaskArtifactUpdateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskArtifactUpdateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TaskArtifactUpdateEvent proto.InternalMessageInfo

func (m *TaskArtifactUpdateEvent) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskArtifactUpdateEvent) GetContextId() string {
	if m != nil {
		return m.ContextId
	}
	return ""
}

func (m *TaskArtifactUpdateEvent) GetArtifact() *Artifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

func (m *TaskArtifactUpdateEvent) GetAppend() bool {
	if m != nil {
		return m.Append
	}
	return false
}

func (m *TaskArtifactUpdateEvent) GetLastChunk() bool {
	if m != nil {
		return m.LastChunk
	}
	return false
}

func (m *TaskArtifactUpdateEvent) GetMetadata() *structpb.Struct {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Configuration for setting up push notifications for task updates.
type PushNotificationConfig struct {
	// A unique id for this push notification.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Url to send the notification too
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Token unique for this task/session
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// Information about the authentication to sent with the notification
	Authentication *AuthenticationInfo `protobuf:"bytes,4,opt,name=authentication,proto3" json:"authentication,omitempty"`
}

func (m *PushNotificationConfig) Reset()      { *m = PushNotificationConfig{} }
func (*PushNotificationConfig) ProtoMessage() {}
func (*PushNotificationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{10}
}
func (m *PushNotificationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushNotificationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushNotificationConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushNotificationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushNotificationConfig.Merge(m, src)
}
func (m *PushNotificationConfig) XXX_Size() int {
	return m.Size()
}
func (m *PushNotificationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PushNotificationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PushNotificationConfig proto.InternalMessageInfo

func (m *PushNotificationConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PushNotificationConfig) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *PushNotificationConfig) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PushNotificationConfig) GetAuthentication() *AuthenticationInfo {
	if m != nil {
		return m.Authentication
	}
	return nil
}

// Defines authentication details, used for push notifications.
type AuthenticationInfo struct {
	// Supported authentication schemes - e.g. Basic, Bearer, etc
	Schemes []string `protobuf:"bytes,1,rep,name=schemes,proto3" json:"schemes,omitempty"`
	// Optional credentials
	Credentials string `protobuf:"bytes,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (m *AuthenticationInfo) Reset()      { *m = AuthenticationInfo{} }
func (*AuthenticationInfo) ProtoMessage() {}
func (*AuthenticationInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{11}
}
func (m *AuthenticationInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticationInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticationInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthenticationInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationInfo.Merge(m, src)
}
func (m *AuthenticationInfo) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticationInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationInfo proto.InternalMessageInfo

func (m *AuthenticationInfo) GetSchemes() []string {
	if m != nil {
		return m.Schemes
	}
	return nil
}

func (m *AuthenticationInfo) GetCredentials() string {
	if m != nil {
		return m.Credentials
	}
	return ""
}

// Defines additional transport information for the agent.
type AgentInterface struct {
	// The url this interface is found at.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The transport supported this url. This is an open form string, to be
	// easily extended for many transport protocols. The core ones officially
	// supported are JSONRPC, GRPC and HTTP+JSON.
	Transport string `protobuf:"bytes,2,opt,name=transport,proto3" json:"transport,omitempty"`
}

func (m *AgentInterface) Reset()      { *m = AgentInterface{} }
func (*AgentInterface) ProtoMessage() {}
func (*AgentInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{12}
}
func (m *AgentInterface) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentInterface.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentInterface.Merge(m, src)
}
func (m *AgentInterface) XXX_Size() int {
	return m.Size()
}
func (m *AgentInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentInterface.DiscardUnknown(m)
}

var xxx_messageInfo_AgentInterface proto.InternalMessageInfo

func (m *AgentInterface) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AgentInterface) GetTransport() string {
	if m != nil {
		return m.Transport
	}
	return ""
}

// AgentCard conveys key information:
// - Overall details (version, name, description, uses)
// - Skills; a set of actions/solutions the agent can perform
// - Default modalities/content types supported by the agent.
// - Authentication requirements
type AgentCard struct {
	// The version of the A2A protocol this agent supports.
	ProtocolVersion string `protobuf:"bytes,16,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// A human readable name for the agent.
	// Example: "Recipe Agent"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A description of the agent's domain of action/solution space.
	// Example: "Agent that helps users with recipes and cooking."
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// A URL to the address the agent is hosted at. This represents the
	// preferred endpoint as declared by the agent.
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// The transport of the preferred endpoint. If empty, defaults to JSONRPC.
	PreferredTransport string `protobuf:"bytes,14,opt,name=preferred_transport,json=preferredTransport,proto3" json:"preferred_transport,omitempty"`
	// Announcement of additional supported transports. Client can use any of
	// the supported transports.
	AdditionalInterfaces []*AgentInterface `protobuf:"bytes,15,rep,name=additional_interfaces,json=additionalInterfaces,proto3" json:"additional_interfaces,omitempty"`
	// The service provider of the agent.
	Provider *AgentProvider `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	// The version of the agent.
	// Example: "1.0.0"
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// A url to provide additional documentation about the agent.
	DocumentationUrl string `protobuf:"bytes,6,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"`
	// A2A Capability set supported by the agent.
	Capabilities *AgentCapabilities `protobuf:"bytes,7,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// The security scheme details used for authenticating with this agent.
	SecuritySchemes map[string]*SecurityScheme `protobuf:"bytes,8,rep,name=security_schemes,json=securitySchemes,proto3" json:"security_schemes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// protolint:disable REPEATED_FIELD_NAMES_PLURALIZED
	// Security requirements for contacting the agent.
	Security []*Security `protobuf:"bytes,9,rep,name=security,proto3" json:"security,omitempty"`
	// protolint:enable REPEATED_FIELD_NAMES_PLURALIZED
	// The set of interaction modes that the agent supports across all skills.
	// This can be overridden per skill. Defined as mime types.
	DefaultInputModes []string `protobuf:"bytes,10,rep,name=default_input_modes,json=defaultInputModes,proto3" json:"default_input_modes,omitempty"`
	// The mime types supported as outputs from this agent.
	DefaultOutputModes []string `protobuf:"bytes,11,rep,name=default_output_modes,json=defaultOutputModes,proto3" json:"default_output_modes,omitempty"`
	// Skills represent a unit of ability an agent can perform. This may
	// somewhat abstract but represents a more focused set of actions that the
	// agent is highly likely to succeed at.
	Skills []*AgentSkill `protobuf:"bytes,12,rep,name=skills,proto3" json:"skills,omitempty"`
	// Whether the agent supports providing an extended agent card when
	// the user is authenticated, i.e. is the card from .well-known
	// different than the card from GetAgentCard.
	SupportsAuthenticatedExtendedCard bool `protobuf:"varint,13,opt,name=supports_authenticated_extended_card,json=supportsAuthenticatedExtendedCard,proto3" json:"supports_authenticated_extended_card,omitempty"`
}

func (m *AgentCard) Reset()      { *m = AgentCard{} }
func (*AgentCard) ProtoMessage() {}
func (*AgentCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{13}
}
func (m *AgentCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentCard.Merge(m, src)
}
func (m *AgentCard) XXX_Size() int {
	return m.Size()
}
func (m *AgentCard) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentCard.DiscardUnknown(m)
}

var xxx_messageInfo_AgentCard proto.InternalMessageInfo

func (m *AgentCard) GetProtocolVersion() string {
	if m != nil {
		return m.ProtocolVersion
	}
	return ""
}

func (m *AgentCard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AgentCard) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AgentCard) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AgentCard) GetPreferredTransport() string {
	if m != nil {
		return m.PreferredTransport
	}
	return ""
}

func (m *AgentCard) GetAdditionalInterfaces() []*AgentInterface {
	if m != nil {
		return m.AdditionalInterfaces
	}
	return nil
}

func (m *AgentCard) GetProvider() *AgentProvider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *AgentCard) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *AgentCard) GetDocumentationUrl() string {
	if m != nil {
		return m.DocumentationUrl
	}
	return ""
}

func (m *AgentCard) GetCapabilities() *AgentCapabilities {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *AgentCard) GetSecuritySchemes() map[string]*SecurityScheme {
	if m != nil {
		return m.SecuritySchemes
	}
	return nil
}

func (m *AgentCard) GetSecurity() []*Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *AgentCard) GetDefaultInputModes() []string {
	if m != nil {
		return m.DefaultInputModes
	}
	return nil
}

func (m *AgentCard) GetDefaultOutputModes() []string {
	if m != nil {
		return m.DefaultOutputModes
	}
	return nil
}

func (m *AgentCard) GetSkills() []*AgentSkill {
	if m != nil {
		return m.Skills
	}
	return nil
}

func (m *AgentCard) GetSupportsAuthenticatedExtendedCard() bool {
	if m != nil {
		return m.SupportsAuthenticatedExtendedCard
	}
	return false
}

// Represents information about the service provider of an agent.
type AgentProvider struct {
	// The providers reference url
	// Example: "https://ai.google.dev"
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The providers organization name
	// Example: "Google"
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (m *AgentProvider) Reset()      { *m = AgentProvider{} }
func (*AgentProvider) ProtoMessage() {}
func (*AgentProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{14}
}
func (m *AgentProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentProvider.Merge(m, src)
}
func (m *AgentProvider) XXX_Size() int {
	return m.Size()
}
func (m *AgentProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentProvider.DiscardUnknown(m)
}

var xxx_messageInfo_AgentProvider proto.InternalMessageInfo

func (m *AgentProvider) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AgentProvider) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

// Defines the A2A feature set supported by the agent
type AgentCapabilities struct {
	// If the agent will support streaming responses
	Streaming bool `protobuf:"varint,1,opt,name=streaming,proto3" json:"streaming,omitempty"`
	// If the agent can send push notifications to the clients webhook
	PushNotifications bool `protobuf:"varint,2,opt,name=push_notifications,json=pushNotifications,proto3" json:"push_notifications,omitempty"`
	// Extensions supported by this agent.
	Extensions []*AgentExtension `protobuf:"bytes,3,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (m *AgentCapabilities) Reset()      { *m = AgentCapabilities{} }
func (*AgentCapabilities) ProtoMessage() {}
func (*AgentCapabilities) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{15}
}
func (m *AgentCapabilities) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentCapabilities) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentCapabilities.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentCapabilities) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentCapabilities.Merge(m, src)
}
func (m *AgentCapabilities) XXX_Size() int {
	return m.Size()
}
func (m *AgentCapabilities) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentCapabilities.DiscardUnknown(m)
}

var xxx_messageInfo_AgentCapabilities proto.InternalMessageInfo

func (m *AgentCapabilities) GetStreaming() bool {
	if m != nil {
		return m.Streaming
	}
	return false
}

func (m *AgentCapabilities) GetPushNotifications() bool {
	if m != nil {
		return m.PushNotifications
	}
	return false
}

func (m *AgentCapabilities) GetExtensions() []*AgentExtension {
	if m != nil {
		return m.Extensions
	}
	return nil
}

// A declaration of an extension supported by an Agent.
type AgentExtension struct {
	// The URI of the extension.
	// Example: "https://developers.google.com/identity/protocols/oauth2"
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// A description of how this agent uses this extension.
	// Example: "Google OAuth 2.0 authentication"
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Whether the client must follow specific requirements of the extension.
	// Example: false
	Required bool `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`
	// Optional configuration for the extension.
	Params *structpb.Struct `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *AgentExtension) Reset()      { *m = AgentExtension{} }
func (*AgentExtension) ProtoMessage() {}
func (*AgentExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{16}
}
func (m *AgentExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentExtension.Merge(m, src)
}
func (m *AgentExtension) XXX_Size() int {
	return m.Size()
}
func (m *AgentExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentExtension.DiscardUnknown(m)
}

var xxx_messageInfo_AgentExtension proto.InternalMessageInfo

func (m *AgentExtension) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *AgentExtension) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AgentExtension) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *AgentExtension) GetParams() *structpb.Struct {
	if m != nil {
		return m.Params
	}
	return nil
}

// AgentSkill represents a unit of action/solution that the agent can perform.
// One can think of this as a type of highly reliable solution that an agent
// can be tasked to provide. Agents have the autonomy to choose how and when
// to use specific skills, but clients should have confidence that if the
// skill is defined that unit of action can be reliably performed.
type AgentSkill struct {
	// Unique id of the skill within this agent.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human readable name for the skill.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A human (or llm) readable description of the skill
	// details and behaviors.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A set of tags for the skill to enhance categorization/utilization.
	// Example: ["cooking", "customer support", "billing"]
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// A set of example queries that this skill is designed to address.
	// These examples should help the caller to understand how to craft requests
	// to the agent to achieve specific goals.
	// Example: ["I need a recipe for bread"]
	Examples []string `protobuf:"bytes,5,rep,name=examples,proto3" json:"examples,omitempty"`
	// Possible input modalities supported.
	InputModes []string `protobuf:"bytes,6,rep,name=input_modes,json=inputModes,proto3" json:"input_modes,omitempty"`
	// Possible output modalities produced
	OutputModes []string `protobuf:"bytes,7,rep,name=output_modes,json=outputModes,proto3" json:"output_modes,omitempty"`
}

func (m *AgentSkill) Reset()      { *m = AgentSkill{} }
func (*AgentSkill) ProtoMessage() {}
func (*AgentSkill) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{17}
}
func (m *AgentSkill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentSkill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentSkill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentSkill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentSkill.Merge(m, src)
}
func (m *AgentSkill) XXX_Size() int {
	return m.Size()
}
func (m *AgentSkill) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentSkill.DiscardUnknown(m)
}

var xxx_messageInfo_AgentSkill proto.InternalMessageInfo

func (m *AgentSkill) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AgentSkill) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AgentSkill) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AgentSkill) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AgentSkill) GetExamples() []string {
	if m != nil {
		return m.Examples
	}
	return nil
}

func (m *AgentSkill) GetInputModes() []string {
	if m != nil {
		return m.InputModes
	}
	return nil
}

func (m *AgentSkill) GetOutputModes() []string {
	if m != nil {
		return m.OutputModes
	}
	return nil
}

type TaskPushNotificationConfig struct {
	// name=tasks/{id}/pushNotificationConfigs/{id}
	Name                   string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PushNotificationConfig *PushNotificationConfig `protobuf:"bytes,2,opt,name=push_notification_config,json=pushNotificationConfig,proto3" json:"push_notification_config,omitempty"`
}

func (m *TaskPushNotificationConfig) Reset()      { *m = TaskPushNotificationConfig{} }
func (*TaskPushNotificationConfig) ProtoMessage() {}
func (*TaskPushNotificationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{18}
}
func (m *TaskPushNotificationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskPushNotificationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskPushNotificationConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskPushNotificationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskPushNotificationConfig.Merge(m, src)
}
func (m *TaskPushNotificationConfig) XXX_Size() int {
	return m.Size()
}
func (m *TaskPushNotificationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskPushNotificationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TaskPushNotificationConfig proto.InternalMessageInfo

func (m *TaskPushNotificationConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskPushNotificationConfig) GetPushNotificationConfig() *PushNotificationConfig {
	if m != nil {
		return m.PushNotificationConfig
	}
	return nil
}

// protolint:disable REPEATED_FIELD_NAMES_PLURALIZED
type StringList struct {
	List []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *StringList) Reset()      { *m = StringList{} }
func (*StringList) ProtoMessage() {}
func (*StringList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{19}
}
func (m *StringList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringList.Merge(m, src)
}
func (m *StringList) XXX_Size() int {
	return m.Size()
}
func (m *StringList) XXX_DiscardUnknown() {
	xxx_messageInfo_StringList.DiscardUnknown(m)
}

var xxx_messageInfo_StringList proto.InternalMessageInfo

func (m *StringList) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type Security struct {
	Schemes map[string]*StringList `protobuf:"bytes,1,rep,name=schemes,proto3" json:"schemes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Security) Reset()      { *m = Security{} }
func (*Security) ProtoMessage() {}
func (*Security) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{20}
}
func (m *Security) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Security) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Security.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Security) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Security.Merge(m, src)
}
func (m *Security) XXX_Size() int {
	return m.Size()
}
func (m *Security) XXX_DiscardUnknown() {
	xxx_messageInfo_Security.DiscardUnknown(m)
}

var xxx_messageInfo_Security proto.InternalMessageInfo

func (m *Security) GetSchemes() map[string]*StringList {
	if m != nil {
		return m.Schemes
	}
	return nil
}

type SecurityScheme struct {
	// Types that are valid to be assigned to Scheme:
	//
	//	*SecurityScheme_ApiKeySecurityScheme
	//	*SecurityScheme_HttpAuthSecurityScheme
	//	*SecurityScheme_Oauth2SecurityScheme
	//	*SecurityScheme_OpenIdConnectSecurityScheme
	Scheme isSecurityScheme_Scheme `protobuf_oneof:"scheme"`
}

func (m *SecurityScheme) Reset()      { *m = SecurityScheme{} }
func (*SecurityScheme) ProtoMessage() {}
func (*SecurityScheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{21}
}
func (m *SecurityScheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityScheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityScheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityScheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityScheme.Merge(m, src)
}
func (m *SecurityScheme) XXX_Size() int {
	return m.Size()
}
func (m *SecurityScheme) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityScheme.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityScheme proto.InternalMessageInfo

type isSecurityScheme_Scheme interface {
	isSecurityScheme_Scheme()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SecurityScheme_ApiKeySecurityScheme struct {
	ApiKeySecurityScheme *APIKeySecurityScheme `protobuf:"bytes,1,opt,name=api_key_security_scheme,json=apiKeySecurityScheme,proto3,oneof" json:"api_key_security_scheme,omitempty"`
}
type SecurityScheme_HttpAuthSecurityScheme struct {
	HttpAuthSecurityScheme *HTTPAuthSecurityScheme `protobuf:"bytes,2,opt,name=http_auth_security_scheme,json=httpAuthSecurityScheme,proto3,oneof" json:"http_auth_security_scheme,omitempty"`
}
type SecurityScheme_Oauth2SecurityScheme struct {
	Oauth2SecurityScheme *OAuth2SecurityScheme `protobuf:"bytes,3,opt,name=oauth2_security_scheme,json=oauth2SecurityScheme,proto3,oneof" json:"oauth2_security_scheme,omitempty"`
}
type SecurityScheme_OpenIdConnectSecurityScheme struct {
	OpenIdConnectSecurityScheme *OpenIdConnectSecurityScheme `protobuf:"bytes,4,opt,name=open_id_connect_security_scheme,json=openIdConnectSecurityScheme,proto3,oneof" json:"open_id_connect_security_scheme,omitempty"`
}

func (*SecurityScheme_ApiKeySecurityScheme) isSecurityScheme_Scheme()        {}
func (*SecurityScheme_HttpAuthSecurityScheme) isSecurityScheme_Scheme()      {}
func (*SecurityScheme_Oauth2SecurityScheme) isSecurityScheme_Scheme()        {}
func (*SecurityScheme_OpenIdConnectSecurityScheme) isSecurityScheme_Scheme() {}

func (m *SecurityScheme) GetScheme() isSecurityScheme_Scheme {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *SecurityScheme) GetApiKeySecurityScheme() *APIKeySecurityScheme {
	if x, ok := m.GetScheme().(*SecurityScheme_ApiKeySecurityScheme); ok {
		return x.ApiKeySecurityScheme
	}
	return nil
}

func (m *SecurityScheme) GetHttpAuthSecurityScheme() *HTTPAuthSecurityScheme {
	if x, ok := m.GetScheme().(*SecurityScheme_HttpAuthSecurityScheme); ok {
		return x.HttpAuthSecurityScheme
	}
	return nil
}

func (m *SecurityScheme) GetOauth2SecurityScheme() *OAuth2SecurityScheme {
	if x, ok := m.GetScheme().(*SecurityScheme_Oauth2SecurityScheme); ok {
		return x.Oauth2SecurityScheme
	}
	return nil
}

func (m *SecurityScheme) GetOpenIdConnectSecurityScheme() *OpenIdConnectSecurityScheme {
	if x, ok := m.GetScheme().(*SecurityScheme_OpenIdConnectSecurityScheme); ok {
		return x.OpenIdConnectSecurityScheme
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SecurityScheme) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SecurityScheme_ApiKeySecurityScheme)(nil),
		(*SecurityScheme_HttpAuthSecurityScheme)(nil),
		(*SecurityScheme_Oauth2SecurityScheme)(nil),
		(*SecurityScheme_OpenIdConnectSecurityScheme)(nil),
	}
}

type APIKeySecurityScheme struct {
	// Description of this security scheme.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Location of the API key, valid values are "query", "header", or "cookie"
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Name of the header, query or cookie parameter to be used.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *APIKeySecurityScheme) Reset()      { *m = APIKeySecurityScheme{} }
func (*APIKeySecurityScheme) ProtoMessage() {}
func (*APIKeySecurityScheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{22}
}
func (m *APIKeySecurityScheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIKeySecurityScheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIKeySecurityScheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIKeySecurityScheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIKeySecurityScheme.Merge(m, src)
}
func (m *APIKeySecurityScheme) XXX_Size() int {
	return m.Size()
}
func (m *APIKeySecurityScheme) XXX_DiscardUnknown() {
	xxx_messageInfo_APIKeySecurityScheme.DiscardUnknown(m)
}

var xxx_messageInfo_APIKeySecurityScheme proto.InternalMessageInfo

func (m *APIKeySecurityScheme) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *APIKeySecurityScheme) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *APIKeySecurityScheme) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HTTPAuthSecurityScheme struct {
	// Description of this security scheme.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The name of the HTTP Authentication scheme to be used in the
	// Authorization header as defined in RFC7235. The values used SHOULD be
	// registered in the IANA Authentication Scheme registry.
	// The value is case-insensitive, as defined in RFC7235.
	Scheme string `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// A hint to the client to identify how the bearer token is formatted.
	// Bearer tokens are usually generated by an authorization server, so
	// this information is primarily for documentation purposes.
	BearerFormat string `protobuf:"bytes,3,opt,name=bearer_format,json=bearerFormat,proto3" json:"bearer_format,omitempty"`
}

func (m *HTTPAuthSecurityScheme) Reset()      { *m = HTTPAuthSecurityScheme{} }
func (*HTTPAuthSecurityScheme) ProtoMessage() {}
func (*HTTPAuthSecurityScheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{23}
}
func (m *HTTPAuthSecurityScheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPAuthSecurityScheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPAuthSecurityScheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPAuthSecurityScheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPAuthSecurityScheme.Merge(m, src)
}
func (m *HTTPAuthSecurityScheme) XXX_Size() int {
	return m.Size()
}
func (m *HTTPAuthSecurityScheme) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPAuthSecurityScheme.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPAuthSecurityScheme proto.InternalMessageInfo

func (m *HTTPAuthSecurityScheme) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *HTTPAuthSecurityScheme) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *HTTPAuthSecurityScheme) GetBearerFormat() string {
	if m != nil {
		return m.BearerFormat
	}
	return ""
}

type OAuth2SecurityScheme struct {
	// Description of this security scheme.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// An object containing configuration information for the flow types supported
	Flows *OAuthFlows `protobuf:"bytes,2,opt,name=flows,proto3" json:"flows,omitempty"`
}

func (m *OAuth2SecurityScheme) Reset()      { *m = OAuth2SecurityScheme{} }
func (*OAuth2SecurityScheme) ProtoMessage() {}
func (*OAuth2SecurityScheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{24}
}
func (m *OAuth2SecurityScheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuth2SecurityScheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuth2SecurityScheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OAuth2SecurityScheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuth2SecurityScheme.Merge(m, src)
}
func (m *OAuth2SecurityScheme) XXX_Size() int {
	return m.Size()
}
func (m *OAuth2SecurityScheme) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuth2SecurityScheme.DiscardUnknown(m)
}

var xxx_messageInfo_OAuth2SecurityScheme proto.InternalMessageInfo

func (m *OAuth2SecurityScheme) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *OAuth2SecurityScheme) GetFlows() *OAuthFlows {
	if m != nil {
		return m.Flows
	}
	return nil
}

type OpenIdConnectSecurityScheme struct {
	// Description of this security scheme.
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// Well-known URL to discover the [[OpenID-Connect-Discovery]] provider
	// metadata.
	OpenIdConnectUrl string `protobuf:"bytes,2,opt,name=open_id_connect_url,json=openIdConnectUrl,proto3" json:"open_id_connect_url,omitempty"`
}

func (m *OpenIdConnectSecurityScheme) Reset()      { *m = OpenIdConnectSecurityScheme{} }
func (*OpenIdConnectSecurityScheme) ProtoMessage() {}
func (*OpenIdConnectSecurityScheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{25}
}
func (m *OpenIdConnectSecurityScheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenIdConnectSecurityScheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenIdConnectSecurityScheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenIdConnectSecurityScheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenIdConnectSecurityScheme.Merge(m, src)
}
func (m *OpenIdConnectSecurityScheme) XXX_Size() int {
	return m.Size()
}
func (m *OpenIdConnectSecurityScheme) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenIdConnectSecurityScheme.DiscardUnknown(m)
}

var xxx_messageInfo_OpenIdConnectSecurityScheme proto.InternalMessageInfo

func (m *OpenIdConnectSecurityScheme) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *OpenIdConnectSecurityScheme) GetOpenIdConnectUrl() string {
	if m != nil {
		return m.OpenIdConnectUrl
	}
	return ""
}

type OAuthFlows struct {
	// Types that are valid to be assigned to Flow:
	//
	//	*OAuthFlows_AuthorizationCode
	//	*OAuthFlows_ClientCredentials
	//	*OAuthFlows_Implicit
	//	*OAuthFlows_Password
	Flow isOAuthFlows_Flow `protobuf_oneof:"flow"`
}

func (m *OAuthFlows) Reset()      { *m = OAuthFlows{} }
func (*OAuthFlows) ProtoMessage() {}
func (*OAuthFlows) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{26}
}
func (m *OAuthFlows) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OAuthFlows) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OAuthFlows.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OAuthFlows) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OAuthFlows.Merge(m, src)
}
func (m *OAuthFlows) XXX_Size() int {
	return m.Size()
}
func (m *OAuthFlows) XXX_DiscardUnknown() {
	xxx_messageInfo_OAuthFlows.DiscardUnknown(m)
}

var xxx_messageInfo_OAuthFlows proto.InternalMessageInfo

type isOAuthFlows_Flow interface {
	isOAuthFlows_Flow()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type OAuthFlows_AuthorizationCode struct {
	AuthorizationCode *AuthorizationCodeOAuthFlow `protobuf:"bytes,1,opt,name=authorization_code,json=authorizationCode,proto3,oneof" json:"authorization_code,omitempty"`
}
type OAuthFlows_ClientCredentials struct {
	ClientCredentials *ClientCredentialsOAuthFlow `protobuf:"bytes,2,opt,name=client_credentials,json=clientCredentials,proto3,oneof" json:"client_credentials,omitempty"`
}
type OAuthFlows_Implicit struct {
	Implicit *ImplicitOAuthFlow `protobuf:"bytes,3,opt,name=implicit,proto3,oneof" json:"implicit,omitempty"`
}
type OAuthFlows_Password struct {
	Password *PasswordOAuthFlow `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
}

func (*OAuthFlows_AuthorizationCode) isOAuthFlows_Flow() {}
func (*OAuthFlows_ClientCredentials) isOAuthFlows_Flow() {}
func (*OAuthFlows_Implicit) isOAuthFlows_Flow()          {}
func (*OAuthFlows_Password) isOAuthFlows_Flow()          {}

func (m *OAuthFlows) GetFlow() isOAuthFlows_Flow {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *OAuthFlows) GetAuthorizationCode() *AuthorizationCodeOAuthFlow {
	if x, ok := m.GetFlow().(*OAuthFlows_AuthorizationCode); ok {
		return x.AuthorizationCode
	}
	return nil
}

func (m *OAuthFlows) GetClientCredentials() *ClientCredentialsOAuthFlow {
	if x, ok := m.GetFlow().(*OAuthFlows_ClientCredentials); ok {
		return x.ClientCredentials
	}
	return nil
}

func (m *OAuthFlows) GetImplicit() *ImplicitOAuthFlow {
	if x, ok := m.GetFlow().(*OAuthFlows_Implicit); ok {
		return x.Implicit
	}
	return nil
}

func (m *OAuthFlows) GetPassword() *PasswordOAuthFlow {
	if x, ok := m.GetFlow().(*OAuthFlows_Password); ok {
		return x.Password
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OAuthFlows) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OAuthFlows_AuthorizationCode)(nil),
		(*OAuthFlows_ClientCredentials)(nil),
		(*OAuthFlows_Implicit)(nil),
		(*OAuthFlows_Password)(nil),
	}
}

type AuthorizationCodeOAuthFlow struct {
	// The authorization URL to be used for this flow. This MUST be in the
	// form of a URL. The OAuth2 standard requires the use of TLS
	AuthorizationUrl string `protobuf:"bytes,1,opt,name=authorization_url,json=authorizationUrl,proto3" json:"authorization_url,omitempty"`
	// The token URL to be used for this flow. This MUST be in the form of a URL.
	// The OAuth2 standard requires the use of TLS.
	TokenUrl string `protobuf:"bytes,2,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	// The URL to be used for obtaining refresh tokens. This MUST be in the
	// form of a URL. The OAuth2 standard requires the use of TLS.
	RefreshUrl string `protobuf:"bytes,3,opt,name=refresh_url,json=refreshUrl,proto3" json:"refresh_url,omitempty"`
	// The available scopes for the OAuth2 security scheme. A map between the
	// scope name and a short description for it. The map MAY be empty.
	Scopes map[string]string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AuthorizationCodeOAuthFlow) Reset()      { *m = AuthorizationCodeOAuthFlow{} }
func (*AuthorizationCodeOAuthFlow) ProtoMessage() {}
func (*AuthorizationCodeOAuthFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{27}
}
func (m *AuthorizationCodeOAuthFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizationCodeOAuthFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizationCodeOAuthFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizationCodeOAuthFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationCodeOAuthFlow.Merge(m, src)
}
func (m *AuthorizationCodeOAuthFlow) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizationCodeOAuthFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationCodeOAuthFlow.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationCodeOAuthFlow proto.InternalMessageInfo

func (m *AuthorizationCodeOAuthFlow) GetAuthorizationUrl() string {
	if m != nil {
		return m.AuthorizationUrl
	}
	return ""
}

func (m *AuthorizationCodeOAuthFlow) GetTokenUrl() string {
	if m != nil {
		return m.TokenUrl
	}
	return ""
}

func (m *AuthorizationCodeOAuthFlow) GetRefreshUrl() string {
	if m != nil {
		return m.RefreshUrl
	}
	return ""
}

func (m *AuthorizationCodeOAuthFlow) GetScopes() map[string]string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type ClientCredentialsOAuthFlow struct {
	// The token URL to be used for this flow. This MUST be in the form of a URL.
	// The OAuth2 standard requires the use of TLS.
	TokenUrl string `protobuf:"bytes,1,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	// The URL to be used for obtaining refresh tokens. This MUST be in the
	// form of a URL. The OAuth2 standard requires the use of TLS.
	RefreshUrl string `protobuf:"bytes,2,opt,name=refresh_url,json=refreshUrl,proto3" json:"refresh_url,omitempty"`
	// The available scopes for the OAuth2 security scheme. A map between the
	// scope name and a short description for it. The map MAY be empty.
	Scopes map[string]string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ClientCredentialsOAuthFlow) Reset()      { *m = ClientCredentialsOAuthFlow{} }
func (*ClientCredentialsOAuthFlow) ProtoMessage() {}
func (*ClientCredentialsOAuthFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{28}
}
func (m *ClientCredentialsOAuthFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientCredentialsOAuthFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientCredentialsOAuthFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientCredentialsOAuthFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientCredentialsOAuthFlow.Merge(m, src)
}
func (m *ClientCredentialsOAuthFlow) XXX_Size() int {
	return m.Size()
}
func (m *ClientCredentialsOAuthFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientCredentialsOAuthFlow.DiscardUnknown(m)
}

var xxx_messageInfo_ClientCredentialsOAuthFlow proto.InternalMessageInfo

func (m *ClientCredentialsOAuthFlow) GetTokenUrl() string {
	if m != nil {
		return m.TokenUrl
	}
	return ""
}

func (m *ClientCredentialsOAuthFlow) GetRefreshUrl() string {
	if m != nil {
		return m.RefreshUrl
	}
	return ""
}

func (m *ClientCredentialsOAuthFlow) GetScopes() map[string]string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type ImplicitOAuthFlow struct {
	// The authorization URL to be used for this flow. This MUST be in the
	// form of a URL. The OAuth2 standard requires the use of TLS
	AuthorizationUrl string `protobuf:"bytes,1,opt,name=authorization_url,json=authorizationUrl,proto3" json:"authorization_url,omitempty"`
	// The URL to be used for obtaining refresh tokens. This MUST be in the
	// form of a URL. The OAuth2 standard requires the use of TLS.
	RefreshUrl string `protobuf:"bytes,2,opt,name=refresh_url,json=refreshUrl,proto3" json:"refresh_url,omitempty"`
	// The available scopes for the OAuth2 security scheme. A map between the
	// scope name and a short description for it. The map MAY be empty.
	Scopes map[string]string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ImplicitOAuthFlow) Reset()      { *m = ImplicitOAuthFlow{} }
func (*ImplicitOAuthFlow) ProtoMessage() {}
func (*ImplicitOAuthFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{29}
}
func (m *ImplicitOAuthFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImplicitOAuthFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImplicitOAuthFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImplicitOAuthFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImplicitOAuthFlow.Merge(m, src)
}
func (m *ImplicitOAuthFlow) XXX_Size() int {
	return m.Size()
}
func (m *ImplicitOAuthFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_ImplicitOAuthFlow.DiscardUnknown(m)
}

var xxx_messageInfo_ImplicitOAuthFlow proto.InternalMessageInfo

func (m *ImplicitOAuthFlow) GetAuthorizationUrl() string {
	if m != nil {
		return m.AuthorizationUrl
	}
	return ""
}

func (m *ImplicitOAuthFlow) GetRefreshUrl() string {
	if m != nil {
		return m.RefreshUrl
	}
	return ""
}

func (m *ImplicitOAuthFlow) GetScopes() map[string]string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

type PasswordOAuthFlow struct {
	// The token URL to be used for this flow. This MUST be in the form of a URL.
	// The OAuth2 standard requires the use of TLS.
	TokenUrl string `protobuf:"bytes,1,opt,name=token_url,json=tokenUrl,proto3" json:"token_url,omitempty"`
	// The URL to be used for obtaining refresh tokens. This MUST be in the
	// form of a URL. The OAuth2 standard requires the use of TLS.
	RefreshUrl string `protobuf:"bytes,2,opt,name=refresh_url,json=refreshUrl,proto3" json:"refresh_url,omitempty"`
	// The available scopes for the OAuth2 security scheme. A map between the
	// scope name and a short description for it. The map MAY be empty.
	Scopes map[string]string `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PasswordOAuthFlow) Reset()      { *m = PasswordOAuthFlow{} }
func (*PasswordOAuthFlow) ProtoMessage() {}
func (*PasswordOAuthFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{30}
}
func (m *PasswordOAuthFlow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordOAuthFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PasswordOAuthFlow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PasswordOAuthFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordOAuthFlow.Merge(m, src)
}
func (m *PasswordOAuthFlow) XXX_Size() int {
	return m.Size()
}
func (m *PasswordOAuthFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordOAuthFlow.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordOAuthFlow proto.InternalMessageInfo

func (m *PasswordOAuthFlow) GetTokenUrl() string {
	if m != nil {
		return m.TokenUrl
	}
	return ""
}

func (m *PasswordOAuthFlow) GetRefreshUrl() string {
	if m != nil {
		return m.RefreshUrl
	}
	return ""
}

func (m *PasswordOAuthFlow) GetScopes() map[string]string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

// /////////// Request Messages ///////////
type SendMessageRequest struct {
	Request       *Message                  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Configuration *SendMessageConfiguration `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Metadata      *structpb.Struct          `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *SendMessageRequest) Reset()      { *m = SendMessageRequest{} }
func (*SendMessageRequest) ProtoMessage() {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{31}
}
func (m *SendMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageRequest.Merge(m, src)
}
func (m *SendMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageRequest proto.InternalMessageInfo

func (m *SendMessageRequest) GetRequest() *Message {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SendMessageRequest) GetConfiguration() *SendMessageConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *SendMessageRequest) GetMetadata() *structpb.Struct {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type GetTaskRequest struct {
	// name=tasks/{id}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	HistoryLength int32  `protobuf:"varint,2,opt,name=history_length,json=historyLength,proto3" json:"history_length,omitempty"`
}

func (m *GetTaskRequest) Reset()      { *m = GetTaskRequest{} }
func (*GetTaskRequest) ProtoMessage() {}
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{32}
}
func (m *GetTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskRequest.Merge(m, src)
}
func (m *GetTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskRequest proto.InternalMessageInfo

func (m *GetTaskRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetTaskRequest) GetHistoryLength() int32 {
	if m != nil {
		return m.HistoryLength
	}
	return 0
}

type CancelTaskRequest struct {
	// name=tasks/{id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CancelTaskRequest) Reset()      { *m = CancelTaskRequest{} }
func (*CancelTaskRequest) ProtoMessage() {}
func (*CancelTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{33}
}
func (m *CancelTaskRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelTaskRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelTaskRequest.Merge(m, src)
}
func (m *CancelTaskRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelTaskRequest proto.InternalMessageInfo

func (m *CancelTaskRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetTaskPushNotificationConfigRequest struct {
	// name=tasks/{id}/pushNotificationConfigs/{push_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *GetTaskPushNotificationConfigRequest) Reset()      { *m = GetTaskPushNotificationConfigRequest{} }
func (*GetTaskPushNotificationConfigRequest) ProtoMessage() {}
func (*GetTaskPushNotificationConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{34}
}
func (m *GetTaskPushNotificationConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTaskPushNotificationConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTaskPushNotificationConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTaskPushNotificationConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskPushNotificationConfigRequest.Merge(m, src)
}
func (m *GetTaskPushNotificationConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTaskPushNotificationConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskPushNotificationConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskPushNotificationConfigRequest proto.InternalMessageInfo

func (m *GetTaskPushNotificationConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteTaskPushNotificationConfigRequest struct {
	// name=tasks/{id}/pushNotificationConfigs/{push_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeleteTaskPushNotificationConfigRequest) Reset() {
	*m = DeleteTaskPushNotificationConfigRequest{}
}
func (*DeleteTaskPushNotificationConfigRequest) ProtoMessage() {}
func (*DeleteTaskPushNotificationConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{35}
}
func (m *DeleteTaskPushNotificationConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTaskPushNotificationConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTaskPushNotificationConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTaskPushNotificationConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTaskPushNotificationConfigRequest.Merge(m, src)
}
func (m *DeleteTaskPushNotificationConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTaskPushNotificationConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTaskPushNotificationConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTaskPushNotificationConfigRequest proto.InternalMessageInfo

func (m *DeleteTaskPushNotificationConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateTaskPushNotificationConfigRequest struct {
	// The task resource for this config.
	// Format: tasks/{id}
	Parent   string                      `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	ConfigId string                      `protobuf:"bytes,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Config   *TaskPushNotificationConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *CreateTaskPushNotificationConfigRequest) Reset() {
	*m = CreateTaskPushNotificationConfigRequest{}
}
func (*CreateTaskPushNotificationConfigRequest) ProtoMessage() {}
func (*CreateTaskPushNotificationConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{36}
}
func (m *CreateTaskPushNotificationConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTaskPushNotificationConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTaskPushNotificationConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTaskPushNotificationConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTaskPushNotificationConfigRequest.Merge(m, src)
}
func (m *CreateTaskPushNotificationConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTaskPushNotificationConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTaskPushNotificationConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTaskPushNotificationConfigRequest proto.InternalMessageInfo

func (m *CreateTaskPushNotificationConfigRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateTaskPushNotificationConfigRequest) GetConfigId() string {
	if m != nil {
		return m.ConfigId
	}
	return ""
}

func (m *CreateTaskPushNotificationConfigRequest) GetConfig() *TaskPushNotificationConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type TaskSubscriptionRequest struct {
	// name=tasks/{id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *TaskSubscriptionRequest) Reset()      { *m = TaskSubscriptionRequest{} }
func (*TaskSubscriptionRequest) ProtoMessage() {}
func (*TaskSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{37}
}
func (m *TaskSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskSubscriptionRequest.Merge(m, src)
}
func (m *TaskSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TaskSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskSubscriptionRequest proto.InternalMessageInfo

func (m *TaskSubscriptionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListTaskPushNotificationConfigRequest struct {
	// parent=tasks/{id}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// For AIP-158 these fields are present. Usually not used/needed.
	// The maximum number of configurations to return.
	// If unspecified, all configs will be returned.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token received from a previous
	// ListTaskPushNotificationConfigRequest call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to
	// `ListTaskPushNotificationConfigRequest` must match the call that provided
	// the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (m *ListTaskPushNotificationConfigRequest) Reset()      { *m = ListTaskPushNotificationConfigRequest{} }
func (*ListTaskPushNotificationConfigRequest) ProtoMessage() {}
func (*ListTaskPushNotificationConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{38}
}
func (m *ListTaskPushNotificationConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskPushNotificationConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskPushNotificationConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskPushNotificationConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskPushNotificationConfigRequest.Merge(m, src)
}
func (m *ListTaskPushNotificationConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskPushNotificationConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskPushNotificationConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskPushNotificationConfigRequest proto.InternalMessageInfo

func (m *ListTaskPushNotificationConfigRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListTaskPushNotificationConfigRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListTaskPushNotificationConfigRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type GetAgentCardRequest struct {
}

func (m *GetAgentCardRequest) Reset()      { *m = GetAgentCardRequest{} }
func (*GetAgentCardRequest) ProtoMessage() {}
func (*GetAgentCardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{39}
}
func (m *GetAgentCardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAgentCardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAgentCardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAgentCardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAgentCardRequest.Merge(m, src)
}
func (m *GetAgentCardRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAgentCardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAgentCardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAgentCardRequest proto.InternalMessageInfo

// ////// Response Messages ///////////
type SendMessageResponse struct {
	// Types that are valid to be assigned to Payload:
	//
	//	*SendMessageResponse_Task
	//	*SendMessageResponse_Msg
	Payload isSendMessageResponse_Payload `protobuf_oneof:"payload"`
}

func (m *SendMessageResponse) Reset()      { *m = SendMessageResponse{} }
func (*SendMessageResponse) ProtoMessage() {}
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{40}
}
func (m *SendMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageResponse.Merge(m, src)
}
func (m *SendMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageResponse proto.InternalMessageInfo

type isSendMessageResponse_Payload interface {
	isSendMessageResponse_Payload()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SendMessageResponse_Task struct {
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3,oneof" json:"task,omitempty"`
}
type SendMessageResponse_Msg struct {
	Msg *Message `protobuf:"bytes,2,opt,name=msg,json=message,proto3,oneof" json:"msg,omitempty"`
}

func (*SendMessageResponse_Task) isSendMessageResponse_Payload() {}
func (*SendMessageResponse_Msg) isSendMessageResponse_Payload()  {}

func (m *SendMessageResponse) GetPayload() isSendMessageResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SendMessageResponse) GetTask() *Task {
	if x, ok := m.GetPayload().(*SendMessageResponse_Task); ok {
		return x.Task
	}
	return nil
}

func (m *SendMessageResponse) GetMsg() *Message {
	if x, ok := m.GetPayload().(*SendMessageResponse_Msg); ok {
		return x.Msg
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SendMessageResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SendMessageResponse_Task)(nil),
		(*SendMessageResponse_Msg)(nil),
	}
}

// The stream response for a message. The stream should be one of the following
// sequences:
// If the response is a message, the stream should contain one, and only one,
// message and then close
// If the response is a task lifecycle, the first response should be a Task
// object followed by zero or more TaskStatusUpdateEvents and
// TaskArtifactUpdateEvents. The stream should complete when the Task
// if in an interrupted or terminal state. A stream that ends before these
// conditions are met are
type StreamResponse struct {
	// Types that are valid to be assigned to Payload:
	//
	//	*StreamResponse_Task
	//	*StreamResponse_Msg
	//	*StreamResponse_StatusUpdate
	//	*StreamResponse_ArtifactUpdate
	Payload isStreamResponse_Payload `protobuf_oneof:"payload"`
}

func (m *StreamResponse) Reset()      { *m = StreamResponse{} }
func (*StreamResponse) ProtoMessage() {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{41}
}
func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

type isStreamResponse_Payload interface {
	isStreamResponse_Payload()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StreamResponse_Task struct {
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3,oneof" json:"task,omitempty"`
}
type StreamResponse_Msg struct {
	Msg *Message `protobuf:"bytes,2,opt,name=msg,json=message,proto3,oneof" json:"msg,omitempty"`
}
type StreamResponse_StatusUpdate struct {
	StatusUpdate *TaskStatusUpdateEvent `protobuf:"bytes,3,opt,name=status_update,json=statusUpdate,proto3,oneof" json:"status_update,omitempty"`
}
type StreamResponse_ArtifactUpdate struct {
	ArtifactUpdate *TaskArtifactUpdateEvent `protobuf:"bytes,4,opt,name=artifact_update,json=artifactUpdate,proto3,oneof" json:"artifact_update,omitempty"`
}

func (*StreamResponse_Task) isStreamResponse_Payload()           {}
func (*StreamResponse_Msg) isStreamResponse_Payload()            {}
func (*StreamResponse_StatusUpdate) isStreamResponse_Payload()   {}
func (*StreamResponse_ArtifactUpdate) isStreamResponse_Payload() {}

func (m *StreamResponse) GetPayload() isStreamResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *StreamResponse) GetTask() *Task {
	if x, ok := m.GetPayload().(*StreamResponse_Task); ok {
		return x.Task
	}
	return nil
}

func (m *StreamResponse) GetMsg() *Message {
	if x, ok := m.GetPayload().(*StreamResponse_Msg); ok {
		return x.Msg
	}
	return nil
}

func (m *StreamResponse) GetStatusUpdate() *TaskStatusUpdateEvent {
	if x, ok := m.GetPayload().(*StreamResponse_StatusUpdate); ok {
		return x.StatusUpdate
	}
	return nil
}

func (m *StreamResponse) GetArtifactUpdate() *TaskArtifactUpdateEvent {
	if x, ok := m.GetPayload().(*StreamResponse_ArtifactUpdate); ok {
		return x.ArtifactUpdate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamResponse_Task)(nil),
		(*StreamResponse_Msg)(nil),
		(*StreamResponse_StatusUpdate)(nil),
		(*StreamResponse_ArtifactUpdate)(nil),
	}
}

type ListTaskPushNotificationConfigResponse struct {
	Configs []*TaskPushNotificationConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (m *ListTaskPushNotificationConfigResponse) Reset() {
	*m = ListTaskPushNotificationConfigResponse{}
}
func (*ListTaskPushNotificationConfigResponse) ProtoMessage() {}
func (*ListTaskPushNotificationConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae781ac5d85ae47e, []int{42}
}
func (m *ListTaskPushNotificationConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTaskPushNotificationConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTaskPushNotificationConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTaskPushNotificationConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskPushNotificationConfigResponse.Merge(m, src)
}
func (m *ListTaskPushNotificationConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTaskPushNotificationConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskPushNotificationConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskPushNotificationConfigResponse proto.InternalMessageInfo

func (m *ListTaskPushNotificationConfigResponse) GetConfigs() []*TaskPushNotificationConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *ListTaskPushNotificationConfigResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterEnum("a2a.v1.TaskState", TaskState_name, TaskState_value)
	proto.RegisterEnum("a2a.v1.Role", Role_name, Role_value)
	proto.RegisterType((*SendMessageConfiguration)(nil), "a2a.v1.SendMessageConfiguration")
	proto.RegisterType((*Task)(nil), "a2a.v1.Task")
	proto.RegisterType((*TaskStatus)(nil), "a2a.v1.TaskStatus")
	proto.RegisterType((*Part)(nil), "a2a.v1.Part")
	proto.RegisterType((*FilePart)(nil), "a2a.v1.FilePart")
	proto.RegisterType((*DataPart)(nil), "a2a.v1.DataPart")
	proto.RegisterType((*Message)(nil), "a2a.v1.Message")
	proto.RegisterType((*Artifact)(nil), "a2a.v1.Artifact")
	proto.RegisterType((*TaskStatusUpdateEvent)(nil), "a2a.v1.TaskStatusUpdateEvent")
	proto.RegisterType((*TaskArtifactUpdateEvent)(nil), "a2a.v1.TaskArtifactUpdateEvent")
	proto.RegisterType((*PushNotificationConfig)(nil), "a2a.v1.PushNotificationConfig")
	proto.RegisterType((*AuthenticationInfo)(nil), "a2a.v1.AuthenticationInfo")
	proto.RegisterType((*AgentInterface)(nil), "a2a.v1.AgentInterface")
	proto.RegisterType((*AgentCard)(nil), "a2a.v1.AgentCard")
	proto.RegisterMapType((map[string]*SecurityScheme)(nil), "a2a.v1.AgentCard.SecuritySchemesEntry")
	proto.RegisterType((*AgentProvider)(nil), "a2a.v1.AgentProvider")
	proto.RegisterType((*AgentCapabilities)(nil), "a2a.v1.AgentCapabilities")
	proto.RegisterType((*AgentExtension)(nil), "a2a.v1.AgentExtension")
	proto.RegisterType((*AgentSkill)(nil), "a2a.v1.AgentSkill")
	proto.RegisterType((*TaskPushNotificationConfig)(nil), "a2a.v1.TaskPushNotificationConfig")
	proto.RegisterType((*StringList)(nil), "a2a.v1.StringList")
	proto.RegisterType((*Security)(nil), "a2a.v1.Security")
	proto.RegisterMapType((map[string]*StringList)(nil), "a2a.v1.Security.SchemesEntry")
	proto.RegisterType((*SecurityScheme)(nil), "a2a.v1.SecurityScheme")
	proto.RegisterType((*APIKeySecurityScheme)(nil), "a2a.v1.APIKeySecurityScheme")
	proto.RegisterType((*HTTPAuthSecurityScheme)(nil), "a2a.v1.HTTPAuthSecurityScheme")
	proto.RegisterType((*OAuth2SecurityScheme)(nil), "a2a.v1.OAuth2SecurityScheme")
	proto.RegisterType((*OpenIdConnectSecurityScheme)(nil), "a2a.v1.OpenIdConnectSecurityScheme")
	proto.RegisterType((*OAuthFlows)(nil), "a2a.v1.OAuthFlows")
	proto.RegisterType((*AuthorizationCodeOAuthFlow)(nil), "a2a.v1.AuthorizationCodeOAuthFlow")
	proto.RegisterMapType((map[string]string)(nil), "a2a.v1.AuthorizationCodeOAuthFlow.ScopesEntry")
	proto.RegisterType((*ClientCredentialsOAuthFlow)(nil), "a2a.v1.ClientCredentialsOAuthFlow")
	proto.RegisterMapType((map[string]string)(nil), "a2a.v1.ClientCredentialsOAuthFlow.ScopesEntry")
	proto.RegisterType((*ImplicitOAuthFlow)(nil), "a2a.v1.ImplicitOAuthFlow")
	proto.RegisterMapType((map[string]string)(nil), "a2a.v1.ImplicitOAuthFlow.ScopesEntry")
	proto.RegisterType((*PasswordOAuthFlow)(nil), "a2a.v1.PasswordOAuthFlow")
	proto.RegisterMapType((map[string]string)(nil), "a2a.v1.PasswordOAuthFlow.ScopesEntry")
	proto.RegisterType((*SendMessageRequest)(nil), "a2a.v1.SendMessageRequest")
	proto.RegisterType((*GetTaskRequest)(nil), "a2a.v1.GetTaskRequest")
	proto.RegisterType((*CancelTaskRequest)(nil), "a2a.v1.CancelTaskRequest")
	proto.RegisterType((*GetTaskPushNotificationConfigRequest)(nil), "a2a.v1.GetTaskPushNotificationConfigRequest")
	proto.RegisterType((*DeleteTaskPushNotificationConfigRequest)(nil), "a2a.v1.DeleteTaskPushNotificationConfigRequest")
	proto.RegisterType((*CreateTaskPushNotificationConfigRequest)(nil), "a2a.v1.CreateTaskPushNotificationConfigRequest")
	proto.RegisterType((*TaskSubscriptionRequest)(nil), "a2a.v1.TaskSubscriptionRequest")
	proto.RegisterType((*ListTaskPushNotificationConfigRequest)(nil), "a2a.v1.ListTaskPushNotificationConfigRequest")
	proto.RegisterType((*GetAgentCardRequest)(nil), "a2a.v1.GetAgentCardRequest")
	proto.RegisterType((*SendMessageResponse)(nil), "a2a.v1.SendMessageResponse")
	proto.RegisterType((*StreamResponse)(nil), "a2a.v1.StreamResponse")
	proto.RegisterType((*ListTaskPushNotificationConfigResponse)(nil), "a2a.v1.ListTaskPushNotificationConfigResponse")
}

func init() { proto.RegisterFile("a2a.proto", fileDescriptor_ae781ac5d85ae47e) }

var fileDescriptor_ae781ac5d85ae47e = []byte{
	// 3100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x39, 0x4f, 0x6c, 0xdb, 0xd6,
	0xf9, 0xa6, 0x64, 0xcb, 0xd2, 0xe7, 0x3f, 0x91, 0x5f, 0x1c, 0x5b, 0x91, 0x13, 0xc5, 0x65, 0xd3,
	0xc4, 0x4d, 0x13, 0xb9, 0x51, 0xf1, 0xfb, 0xb5, 0x73, 0x17, 0x6c, 0xb2, 0xa3, 0xc4, 0x6a, 0xfe,
	0xb9, 0x94, 0x9c, 0x16, 0x6d, 0x01, 0xe2, 0x99, 0x7c, 0x92, 0x39, 0x53, 0x24, 0x4b, 0x3e, 0x39,
	0x71, 0x8b, 0x62, 0xc3, 0x8e, 0x3d, 0x0c, 0x2b, 0xba, 0xc3, 0x76, 0xdd, 0x65, 0xdd, 0x0e, 0xc3,
	0xce, 0x3b, 0x0c, 0x18, 0x30, 0x0c, 0xc3, 0x76, 0x29, 0xb0, 0x4b, 0x91, 0x61, 0x43, 0xeb, 0xee,
	0x30, 0x6c, 0x97, 0xf6, 0xda, 0xcb, 0x86, 0xf7, 0xf8, 0x48, 0x91, 0x94, 0x64, 0xab, 0x6d, 0x7a,
	0x23, 0xbf, 0xef, 0x7b, 0xdf, 0xff, 0x7f, 0x7c, 0x84, 0x1c, 0xae, 0xe0, 0xb2, 0xe3, 0xda, 0xd4,
	0x46, 0x19, 0xf6, 0xb8, 0x7f, 0xb5, 0x78, 0xa6, 0x6d, 0xdb, 0x6d, 0x93, 0xac, 0x62, 0xc7, 0x58,
	0xc5, 0x96, 0x65, 0x53, 0x4c, 0x0d, 0xdb, 0xf2, 0x7c, 0xaa, 0xe2, 0x62, 0x04, 0xab, 0x99, 0x06,
	0xb1, 0xa8, 0x40, 0x9c, 0x8b, 0x20, 0x5a, 0x06, 0x31, 0x75, 0x75, 0x87, 0xec, 0xe2, 0x7d, 0xc3,
	0x76, 0x05, 0xc1, 0x92, 0x20, 0xe0, 0x6f, 0x3b, 0xdd, 0xd6, 0x2a, 0xe9, 0x38, 0xf4, 0x40, 0x20,
	0xcf, 0x24, 0x91, 0x1e, 0x75, 0xbb, 0x5a, 0x92, 0x77, 0x88, 0xa5, 0x46, 0x87, 0x78, 0x14, 0x77,
	0x1c, 0x9f, 0x40, 0xfe, 0x87, 0x04, 0x85, 0x06, 0xb1, 0xf4, 0x3b, 0xc4, 0xf3, 0x70, 0x9b, 0x6c,
	0xd8, 0x56, 0xcb, 0x68, 0x77, 0x5d, 0xae, 0x39, 0xaa, 0xc0, 0x29, 0xac, 0x69, 0xc4, 0xa1, 0x44,
	0x57, 0xed, 0x2e, 0x75, 0xba, 0x54, 0xed, 0xd8, 0x3a, 0xf1, 0x0a, 0xd2, 0x72, 0x7a, 0x25, 0xa7,
	0x9c, 0x0c, 0x90, 0xf7, 0x38, 0xee, 0x0e, 0x43, 0xa1, 0x5b, 0x30, 0xe7, 0x74, 0xbd, 0x5d, 0xd5,
	0xb2, 0xa9, 0xd1, 0x32, 0x34, 0xce, 0xa8, 0x90, 0x5a, 0x96, 0x56, 0xa6, 0x2a, 0xa5, 0xb2, 0xef,
	0xa8, 0xf2, 0x56, 0xd7, 0xdb, 0xbd, 0x1b, 0xc1, 0xfb, 0x52, 0x95, 0xbc, 0x93, 0x80, 0xa3, 0xa7,
	0x60, 0x76, 0xd7, 0xf0, 0xa8, 0xed, 0x1e, 0xa8, 0x26, 0xb1, 0xda, 0x74, 0xb7, 0x90, 0x5e, 0x96,
	0x56, 0x26, 0x94, 0x19, 0x01, 0xbd, 0xcd, 0x81, 0xa8, 0x08, 0xd9, 0x1d, 0xd3, 0xd6, 0xf6, 0x0c,
	0xab, 0x5d, 0x18, 0x5f, 0x96, 0x56, 0xb2, 0x4a, 0xf8, 0x2e, 0x7f, 0x2e, 0xc1, 0x78, 0x13, 0x7b,
	0x7b, 0x68, 0x16, 0x52, 0x86, 0x5e, 0x90, 0x96, 0xa5, 0x95, 0x9c, 0x92, 0x32, 0x74, 0x74, 0x16,
	0x40, 0xb3, 0x2d, 0x4a, 0x1e, 0x52, 0xd5, 0xd0, 0xb9, 0x86, 0x39, 0x25, 0x27, 0x20, 0x75, 0x1d,
	0x5d, 0x82, 0x8c, 0x47, 0x31, 0xed, 0x7a, 0x5c, 0xe4, 0x54, 0x05, 0x05, 0xca, 0x33, 0x66, 0x0d,
	0x8e, 0x51, 0x04, 0x05, 0x2a, 0x43, 0x0e, 0xbb, 0xd4, 0x68, 0x61, 0x8d, 0x7a, 0x85, 0xf1, 0xe5,
	0xf4, 0xca, 0x54, 0x25, 0x1f, 0x90, 0x57, 0x05, 0x42, 0xe9, 0x91, 0xa0, 0xa7, 0x61, 0x52, 0x18,
	0x50, 0x98, 0xe0, 0xd4, 0x27, 0x02, 0x6a, 0x11, 0x06, 0x25, 0xc0, 0xa3, 0xe7, 0x20, 0xdb, 0x21,
	0x14, 0xeb, 0x98, 0xe2, 0x42, 0x86, 0x2b, 0xb2, 0x58, 0xf6, 0x63, 0x5a, 0x0e, 0x62, 0x5a, 0x6e,
	0xf0, 0x88, 0x2b, 0x21, 0xa1, 0xfc, 0x33, 0x09, 0xa0, 0xa7, 0x26, 0xba, 0x08, 0x13, 0x4c, 0x51,
	0xc2, 0x8d, 0x9f, 0xad, 0xcc, 0x25, 0x2d, 0x21, 0x8a, 0x8f, 0x47, 0x2b, 0x90, 0xe9, 0x3a, 0x3a,
	0xa3, 0xf4, 0x03, 0xd6, 0xaf, 0x56, 0xc7, 0x7f, 0x40, 0x2f, 0x40, 0x2e, 0xcc, 0x24, 0xe1, 0xa0,
	0x62, 0x9f, 0x5e, 0xcd, 0x80, 0x42, 0xe9, 0x11, 0xcb, 0x14, 0xc6, 0xb7, 0xb0, 0x4b, 0xd1, 0x3c,
	0x8c, 0x33, 0x4f, 0xfb, 0x01, 0xd9, 0x1c, 0x53, 0xf8, 0x1b, 0xba, 0x00, 0xe3, 0x2d, 0xc3, 0x0c,
	0xe4, 0x87, 0x4e, 0xbc, 0x61, 0x98, 0x84, 0x9d, 0x62, 0x74, 0x0c, 0xcf, 0xe8, 0xb8, 0x4b, 0xd2,
	0x71, 0xba, 0xeb, 0x98, 0xe2, 0x80, 0x8e, 0xe1, 0xd7, 0x33, 0x30, 0xee, 0x60, 0x97, 0xca, 0xdf,
	0x87, 0x6c, 0xc0, 0x03, 0x9d, 0x87, 0x19, 0xc6, 0x43, 0x7d, 0x60, 0xd0, 0x5d, 0xb5, 0xeb, 0x1a,
	0xa1, 0x0a, 0x53, 0x0c, 0xfc, 0x8a, 0x41, 0x77, 0xb7, 0x5d, 0x03, 0xad, 0xc0, 0x89, 0x1e, 0xd5,
	0xce, 0x01, 0x25, 0x1e, 0x57, 0x6a, 0x7a, 0x73, 0x4c, 0x99, 0x09, 0xe8, 0xd6, 0x19, 0x18, 0x2d,
	0x41, 0xae, 0x63, 0x74, 0x88, 0x4a, 0x0f, 0x1c, 0xc2, 0x15, 0xca, 0x29, 0x59, 0x06, 0x68, 0x1e,
	0x38, 0x84, 0x29, 0xc0, 0xa8, 0xe5, 0xe7, 0x21, 0x1b, 0x28, 0x87, 0x9e, 0x11, 0xca, 0x4b, 0x47,
	0xc7, 0x93, 0x13, 0xc9, 0xff, 0x95, 0x60, 0x52, 0xb8, 0x9f, 0xa5, 0xac, 0x08, 0x80, 0x1a, 0xa6,
	0x72, 0x4e, 0x40, 0xea, 0xc7, 0x66, 0xf4, 0x22, 0x4c, 0x52, 0xec, 0xed, 0x31, 0x9c, 0xaf, 0x65,
	0x86, 0xbd, 0xd6, 0x75, 0xb4, 0x0c, 0xe3, 0xae, 0x6d, 0x12, 0x5e, 0x3a, 0xb3, 0x95, 0xe9, 0xc0,
	0x99, 0x8a, 0x6d, 0x12, 0x85, 0x63, 0xd0, 0x05, 0x98, 0xe4, 0x7c, 0x2c, 0x2a, 0x12, 0x36, 0x24,
	0x62, 0x06, 0x29, 0x01, 0xf2, 0x2b, 0x65, 0x2b, 0x2a, 0x01, 0x90, 0x87, 0x94, 0x58, 0x1e, 0x6b,
	0x96, 0x85, 0x49, 0xde, 0x5a, 0x22, 0x10, 0xf9, 0x91, 0x04, 0xd9, 0xa0, 0x8a, 0xd0, 0x39, 0x98,
	0x0a, 0xea, 0xa8, 0xe7, 0x03, 0x08, 0x40, 0x75, 0x1d, 0x21, 0x18, 0xb7, 0x70, 0x27, 0x08, 0x04,
	0x7f, 0x46, 0xcb, 0x30, 0xa5, 0x13, 0x4f, 0x73, 0x0d, 0x87, 0x77, 0xa3, 0x71, 0x8e, 0x8a, 0x82,
	0x90, 0x0c, 0x13, 0x2c, 0x4f, 0xbc, 0x81, 0xe6, 0xf9, 0xa8, 0x6f, 0xc6, 0xb8, 0x3f, 0x4a, 0x70,
	0xaa, 0x57, 0xaa, 0xdb, 0xbc, 0xfa, 0x6a, 0xfb, 0xcc, 0x97, 0x91, 0x70, 0x49, 0xb1, 0x70, 0x3d,
	0xc6, 0xc6, 0x35, 0x0f, 0x13, 0x2d, 0xc3, 0xc2, 0xa6, 0xe8, 0x9a, 0xfe, 0x4b, 0xcc, 0xd0, 0x89,
	0x51, 0x7b, 0xce, 0x7f, 0x24, 0x58, 0x64, 0x12, 0x82, 0x48, 0x3d, 0x0e, 0x53, 0x2e, 0x43, 0x36,
	0x88, 0x6c, 0xb2, 0xd2, 0xc3, 0xb6, 0x1a, 0x52, 0xa0, 0x05, 0xc8, 0x60, 0xc7, 0x21, 0x96, 0x2e,
	0xac, 0x11, 0x6f, 0x4c, 0x88, 0x89, 0x3d, 0xaa, 0x6a, 0xbb, 0x5d, 0x6b, 0x8f, 0x1b, 0x94, 0x55,
	0x72, 0x0c, 0xb2, 0xc1, 0x00, 0x5f, 0xad, 0xc3, 0xfe, 0x44, 0x82, 0x85, 0xc1, 0x53, 0xac, 0x6f,
	0xce, 0xe4, 0x21, 0xdd, 0x75, 0x4d, 0x61, 0x1c, 0x7b, 0x64, 0x5e, 0xa7, 0xf6, 0x1e, 0xb1, 0x44,
	0x8e, 0xfa, 0x2f, 0x68, 0x1d, 0x66, 0x71, 0x97, 0xee, 0x12, 0x8b, 0x06, 0x53, 0x73, 0x5c, 0xf4,
	0xd5, 0xc0, 0xe4, 0x18, 0xb6, 0x6e, 0xb5, 0x6c, 0x25, 0x71, 0x42, 0xde, 0x02, 0xd4, 0x4f, 0x85,
	0x0a, 0x30, 0xe9, 0x69, 0xbb, 0xa4, 0x13, 0x0e, 0xee, 0xe0, 0x95, 0x15, 0x86, 0xe6, 0x12, 0x9d,
	0xd1, 0x63, 0xd3, 0x13, 0x3a, 0x46, 0x41, 0xf2, 0x77, 0x61, 0xb6, 0xda, 0x26, 0x16, 0xad, 0x5b,
	0x94, 0xb8, 0x2d, 0xac, 0x91, 0xc0, 0x1e, 0xa9, 0x67, 0xcf, 0x19, 0xc8, 0x51, 0x17, 0x5b, 0x9e,
	0x63, 0xbb, 0x34, 0x08, 0x62, 0x08, 0x90, 0x3f, 0xcf, 0x40, 0x8e, 0xb3, 0xd8, 0xc0, 0xae, 0x8e,
	0x9e, 0x86, 0x3c, 0xf7, 0xaa, 0x66, 0x9b, 0xea, 0x3e, 0x71, 0x59, 0x11, 0x14, 0xf2, 0xfc, 0xc8,
	0x89, 0x00, 0x7e, 0xdf, 0x07, 0x87, 0x95, 0x2c, 0x0d, 0xaf, 0xe4, 0x54, 0x7f, 0x25, 0x0b, 0xf5,
	0xd2, 0x3d, 0xf5, 0x56, 0xe1, 0xa4, 0xe3, 0x92, 0x16, 0x71, 0x5d, 0xa2, 0xab, 0x3d, 0x45, 0x67,
	0x39, 0x05, 0x0a, 0x51, 0xcd, 0x00, 0x83, 0x6e, 0xc1, 0x29, 0xac, 0xeb, 0x06, 0x63, 0x87, 0x4d,
	0xd5, 0x08, 0x2c, 0xf7, 0x0a, 0x27, 0x78, 0x73, 0x58, 0x08, 0x03, 0x12, 0x73, 0x8c, 0x32, 0xdf,
	0x3b, 0x14, 0x02, 0x3d, 0x74, 0x15, 0xb2, 0x8e, 0x6b, 0xef, 0x1b, 0x3a, 0x71, 0x45, 0x40, 0x4f,
	0xc5, 0xce, 0x6f, 0x09, 0xa4, 0x12, 0x92, 0xb1, 0x78, 0x05, 0xae, 0x99, 0xe0, 0x4a, 0x06, 0xaf,
	0xe8, 0x19, 0x98, 0xd3, 0x6d, 0xad, 0xdb, 0x21, 0x96, 0xbf, 0x5b, 0xaa, 0xcc, 0xd4, 0x0c, 0xa7,
	0xc9, 0xc7, 0x10, 0xdb, 0xae, 0x89, 0xae, 0xc1, 0xb4, 0x86, 0x1d, 0xbc, 0x63, 0x98, 0x06, 0x35,
	0x08, 0x6b, 0x3e, 0x4c, 0xfa, 0xe9, 0x98, 0xf4, 0x8d, 0x08, 0x81, 0x12, 0x23, 0x47, 0x2f, 0x43,
	0xde, 0x23, 0x5a, 0xd7, 0x35, 0xe8, 0x81, 0x1a, 0xa4, 0x4f, 0x96, 0x3b, 0xe0, 0x42, 0x82, 0x85,
	0xab, 0x97, 0x1b, 0x82, 0xb2, 0xe1, 0x13, 0xd6, 0x2c, 0xea, 0x1e, 0x28, 0x27, 0xbc, 0x38, 0x94,
	0xd5, 0x73, 0x00, 0x2a, 0xe4, 0xe2, 0x6b, 0x52, 0xc0, 0x40, 0x09, 0x29, 0x50, 0x19, 0x4e, 0xea,
	0xa4, 0x85, 0xbb, 0x26, 0x55, 0x0d, 0xab, 0xb7, 0x7b, 0x02, 0x4f, 0xe1, 0x39, 0x81, 0xaa, 0x5b,
	0xe1, 0xe6, 0xf9, 0x2c, 0xcc, 0x07, 0xf4, 0xb1, 0x65, 0x75, 0x8a, 0x1f, 0x40, 0x02, 0x17, 0xdd,
	0x55, 0x59, 0xab, 0xdc, 0x33, 0x4c, 0xd3, 0x2b, 0x4c, 0x73, 0x6d, 0x50, 0xcc, 0xb0, 0x06, 0x43,
	0x29, 0x82, 0x02, 0xdd, 0x83, 0xf3, 0x5e, 0xd7, 0x61, 0xf9, 0xe1, 0xa9, 0x91, 0xaa, 0x23, 0xba,
	0xca, 0xbb, 0xb9, 0x4e, 0x74, 0x55, 0xc3, 0xae, 0x5e, 0x98, 0xe1, 0xfd, 0xe5, 0x89, 0x80, 0xb6,
	0x1a, 0x25, 0xad, 0x09, 0x4a, 0xe6, 0xb2, 0xe2, 0x6b, 0x30, 0x3f, 0xc8, 0x6b, 0x2c, 0x81, 0xf7,
	0xc8, 0x41, 0x50, 0x5f, 0x7b, 0xe4, 0x00, 0x5d, 0x86, 0x89, 0x7d, 0x6c, 0x76, 0x83, 0xad, 0x68,
	0x21, 0xe9, 0x33, 0xff, 0xb8, 0xe2, 0x13, 0xad, 0xa5, 0x5e, 0x90, 0xe4, 0x1a, 0xcc, 0xc4, 0x92,
	0x6b, 0x40, 0xd1, 0xca, 0x30, 0x6d, 0xbb, 0x6d, 0x6c, 0x19, 0x6f, 0xe1, 0x48, 0x29, 0xc5, 0x60,
	0xf2, 0x4f, 0x25, 0x98, 0xeb, 0x4b, 0x13, 0x56, 0xee, 0x1e, 0x75, 0x09, 0xee, 0xb0, 0x75, 0x5b,
	0xf2, 0xdb, 0x69, 0x08, 0x40, 0x57, 0x00, 0xf5, 0xed, 0xff, 0x7e, 0x67, 0xc9, 0x2a, 0x73, 0xc9,
	0x05, 0xdf, 0x43, 0xff, 0x1f, 0x9b, 0x8f, 0xe9, 0x01, 0x05, 0x56, 0x0b, 0xd0, 0xb1, 0xb9, 0xf9,
	0x9e, 0x24, 0x1a, 0x53, 0x88, 0xf6, 0x6d, 0x34, 0x7a, 0x36, 0x1a, 0x23, 0x74, 0x8b, 0x22, 0x64,
	0x5d, 0xf2, 0x66, 0xd7, 0x70, 0x89, 0xbf, 0x14, 0x65, 0x95, 0xf0, 0x1d, 0xad, 0x42, 0xc6, 0xc1,
	0x2e, 0xee, 0x78, 0xa2, 0x6e, 0x87, 0x8e, 0x05, 0x41, 0xc6, 0x66, 0x39, 0xf4, 0x32, 0xa7, 0x6f,
	0x10, 0x04, 0xfd, 0x2c, 0x35, 0xbc, 0x9f, 0xa5, 0xfb, 0x35, 0x44, 0x30, 0x4e, 0x71, 0xdb, 0xff,
	0xac, 0xc8, 0x29, 0xfc, 0x99, 0x69, 0x4d, 0x1e, 0xe2, 0x8e, 0x63, 0x12, 0x7f, 0x61, 0xc9, 0x29,
	0xe1, 0x3b, 0x5b, 0x90, 0xa2, 0xd5, 0x92, 0xf1, 0x37, 0x0e, 0xa3, 0x57, 0x26, 0x4f, 0xc0, 0x74,
	0xac, 0x3c, 0xfc, 0x9d, 0x64, 0xca, 0xee, 0xd5, 0x85, 0xfc, 0xae, 0x04, 0x45, 0x36, 0xcb, 0x87,
	0x4c, 0xb8, 0x41, 0x8d, 0xf9, 0x55, 0x28, 0xf4, 0x85, 0x5d, 0xd5, 0x38, 0xfd, 0x88, 0x5f, 0x7f,
	0x0b, 0xce, 0x40, 0xb8, 0xbc, 0x0c, 0xd0, 0xa0, 0xae, 0x61, 0xb5, 0x6f, 0x1b, 0x1e, 0x65, 0xb2,
	0x4d, 0xc3, 0xa3, 0x62, 0x90, 0xf1, 0x67, 0xf9, 0x7d, 0x09, 0xb2, 0x41, 0x2d, 0xa0, 0xe7, 0xe3,
	0xc3, 0x6e, 0xaa, 0x72, 0x36, 0x59, 0x2e, 0xe5, 0x58, 0x93, 0x0a, 0xa8, 0x8b, 0x77, 0x61, 0xfa,
	0x98, 0x3a, 0x5c, 0x89, 0xd7, 0x61, 0xd8, 0x2d, 0x7a, 0xea, 0x45, 0x6b, 0xf0, 0xbd, 0x34, 0xcc,
	0xc6, 0x2b, 0x14, 0x6d, 0xc3, 0x22, 0x76, 0x0c, 0x75, 0x8f, 0x1c, 0xa8, 0x89, 0xd6, 0x2a, 0xbe,
	0x05, 0xce, 0x84, 0x99, 0xbf, 0x55, 0xbf, 0x45, 0x0e, 0xe2, 0xc7, 0x37, 0xc7, 0x94, 0x79, 0xec,
	0x18, 0x7d, 0x70, 0xf4, 0x3a, 0x9c, 0xde, 0xa5, 0xd4, 0xe1, 0x6d, 0xa9, 0x8f, 0x71, 0xc2, 0xf9,
	0x9b, 0xcd, 0xe6, 0x16, 0xeb, 0x49, 0x7d, 0xac, 0x17, 0x18, 0x8b, 0x7e, 0x0c, 0x6a, 0xc2, 0x82,
	0xcd, 0x18, 0x57, 0xfa, 0x38, 0xa7, 0xe3, 0x2a, 0xdf, 0x63, 0x87, 0x2b, 0xfd, 0x2a, 0xfb, 0xa7,
	0x13, 0x5c, 0xf7, 0xe0, 0x9c, 0xed, 0x10, 0x4b, 0x35, 0x74, 0x96, 0x24, 0x16, 0xd1, 0x68, 0x1f,
	0x7b, 0xbf, 0xe8, 0x9e, 0x0c, 0xd9, 0x3b, 0xc4, 0xaa, 0xeb, 0x1b, 0x3e, 0x71, 0x9f, 0x94, 0x25,
	0x7b, 0x38, 0x7a, 0x3d, 0x0b, 0x19, 0x9f, 0xa7, 0xbc, 0x0b, 0xf3, 0x83, 0x3c, 0x9b, 0x2c, 0x43,
	0x69, 0x60, 0xa3, 0x30, 0x6d, 0x2d, 0xda, 0x2a, 0xc3, 0xf7, 0x41, 0x9f, 0x1c, 0xf2, 0x03, 0x58,
	0x18, 0xec, 0xea, 0x11, 0x64, 0x2d, 0x04, 0xfa, 0x0a, 0x49, 0xe2, 0x0d, 0x3d, 0x09, 0x33, 0x3b,
	0x04, 0xbb, 0xc4, 0x55, 0x5b, 0xb6, 0xdb, 0xc1, 0x54, 0x08, 0x9c, 0xf6, 0x81, 0x37, 0x38, 0x4c,
	0xde, 0x81, 0xf9, 0x41, 0x91, 0x18, 0x41, 0xec, 0x0a, 0x4c, 0xb4, 0x4c, 0xfb, 0x81, 0x97, 0x4c,
	0x6f, 0xce, 0xee, 0x06, 0xc3, 0x28, 0x3e, 0x81, 0x6c, 0xc1, 0xd2, 0x11, 0xe1, 0x18, 0x41, 0xd4,
	0x15, 0x38, 0x99, 0x0c, 0x7f, 0x6f, 0x47, 0xce, 0xc7, 0x62, 0xb9, 0xed, 0x9a, 0xf2, 0x6f, 0x52,
	0x00, 0x3d, 0x2d, 0x50, 0x03, 0x10, 0xcb, 0x29, 0xdb, 0x15, 0x73, 0x4a, 0xd5, 0x6c, 0x3d, 0xa8,
	0x20, 0x39, 0xba, 0x2d, 0x87, 0x14, 0x1b, 0xb6, 0x4e, 0x42, 0x06, 0x9b, 0x63, 0xca, 0x1c, 0x4e,
	0x62, 0x19, 0x53, 0xff, 0x56, 0x4e, 0x4d, 0x6e, 0xc4, 0x11, 0xa6, 0x1b, 0x9c, 0x62, 0xa3, 0x47,
	0x10, 0x63, 0xaa, 0x25, 0xb1, 0xe8, 0x79, 0xc8, 0x1a, 0x1d, 0xc7, 0x34, 0x34, 0x23, 0xf8, 0x80,
	0x09, 0xd7, 0xaf, 0xba, 0x80, 0x47, 0x39, 0x84, 0xc4, 0xec, 0xa0, 0x83, 0x3d, 0xef, 0x81, 0xed,
	0xea, 0xa2, 0x10, 0x4e, 0xf7, 0x3e, 0x49, 0x7d, 0x78, 0xec, 0x60, 0x40, 0xcc, 0xef, 0x1b, 0x4c,
	0xfb, 0x81, 0xfc, 0x6e, 0x0a, 0x8a, 0xc3, 0x5d, 0xc0, 0x16, 0xc9, 0xb8, 0x0b, 0x7b, 0xdb, 0x41,
	0x3e, 0x86, 0x60, 0x8b, 0xe4, 0x12, 0xe4, 0xf8, 0x27, 0x4a, 0x24, 0x46, 0x59, 0x0e, 0x60, 0xc8,
	0x73, 0x30, 0xe5, 0x92, 0x96, 0x4b, 0xbc, 0x5d, 0xb5, 0xb7, 0x77, 0x83, 0x00, 0x31, 0x82, 0x1b,
	0x2c, 0x9b, 0x6d, 0x87, 0x04, 0x37, 0x63, 0xe5, 0xe3, 0x23, 0x54, 0x6e, 0xf0, 0x03, 0x7e, 0x83,
	0x16, 0xa7, 0x8b, 0xdf, 0x82, 0xa9, 0x08, 0x78, 0x40, 0x7b, 0x9e, 0x8f, 0xb6, 0xe7, 0x5c, 0xb4,
	0x15, 0xff, 0x5d, 0x82, 0xe2, 0xf0, 0xd0, 0xc5, 0xed, 0x93, 0x8e, 0xb6, 0x2f, 0x75, 0x84, 0x7d,
	0xe9, 0xb8, 0x7d, 0xc3, 0x25, 0x3e, 0x6e, 0xfb, 0xfe, 0x26, 0xc1, 0x5c, 0x5f, 0x3e, 0x7d, 0xb9,
	0x18, 0x1f, 0x6b, 0xe6, 0xb5, 0x84, 0x99, 0x4f, 0x0d, 0x4d, 0xe4, 0xc7, 0x6d, 0xdd, 0x5f, 0x24,
	0x98, 0xeb, 0x4b, 0xfa, 0xaf, 0x19, 0xb4, 0xa1, 0xd6, 0xf4, 0x09, 0x7a, 0xdc, 0xd6, 0xfc, 0x5e,
	0x02, 0x14, 0xb9, 0x70, 0x57, 0xc8, 0x9b, 0x5d, 0xe2, 0x51, 0x54, 0x86, 0x49, 0xd7, 0x7f, 0x14,
	0x8d, 0x2c, 0x79, 0xf7, 0xba, 0x9e, 0xfe, 0xb8, 0x9a, 0x52, 0x02, 0x22, 0x74, 0x03, 0x66, 0xb4,
	0xe8, 0x5d, 0xbd, 0xe8, 0x54, 0xcb, 0xbd, 0x65, 0x67, 0xf0, 0x9d, 0xbe, 0x12, 0x3f, 0x16, 0xbb,
	0xfd, 0x48, 0x8f, 0x7a, 0xfb, 0xb1, 0x05, 0xb3, 0x37, 0x09, 0x65, 0x1b, 0x62, 0xa0, 0xfe, 0x62,
	0x74, 0x25, 0xf4, 0x55, 0xf5, 0xf7, 0xc2, 0xfe, 0x1b, 0xfc, 0xd4, 0x80, 0x1b, 0x7c, 0xf9, 0x22,
	0xcc, 0x6d, 0x60, 0x4b, 0x23, 0x66, 0x94, 0xe9, 0x80, 0x3d, 0x53, 0x5e, 0x83, 0xf3, 0x42, 0xf4,
	0x90, 0x35, 0xf2, 0x88, 0xb3, 0xd7, 0xe0, 0xe2, 0x75, 0x62, 0x12, 0x4a, 0xbe, 0xda, 0xf1, 0x5f,
	0x4a, 0x70, 0x71, 0xc3, 0x25, 0x78, 0x94, 0xf3, 0x4b, 0xfc, 0xdb, 0x81, 0x58, 0x34, 0xea, 0x11,
	0x01, 0x42, 0xcb, 0x90, 0xf3, 0x83, 0x10, 0x5e, 0x7a, 0xf9, 0xf8, 0xac, 0x0f, 0xad, 0xeb, 0xe8,
	0x3b, 0x90, 0x11, 0xbb, 0x73, 0x3a, 0x3e, 0x80, 0x86, 0x4b, 0x16, 0x22, 0xfc, 0x63, 0xf2, 0x15,
	0xff, 0x32, 0xae, 0xd1, 0xdd, 0x09, 0x87, 0xee, 0x51, 0xa6, 0xbd, 0x0d, 0x4f, 0xb1, 0xf5, 0xf5,
	0x78, 0xbb, 0x16, 0xe2, 0x76, 0x85, 0x26, 0x2d, 0x41, 0xce, 0xc1, 0x6d, 0xa2, 0x7a, 0xc6, 0x5b,
	0x44, 0x44, 0x38, 0xcb, 0x00, 0x0d, 0xe3, 0x2d, 0x7e, 0x6d, 0xcd, 0x91, 0xd1, 0x4b, 0x2f, 0x4e,
	0xde, 0x64, 0x00, 0xf9, 0x14, 0x9c, 0xbc, 0x49, 0x68, 0x78, 0x97, 0x20, 0x44, 0xc9, 0x1d, 0x38,
	0x19, 0xab, 0x13, 0xcf, 0xb1, 0x2d, 0x8f, 0x20, 0x99, 0x7d, 0x0f, 0x79, 0x7b, 0xa2, 0x4a, 0xa6,
	0xa3, 0x8e, 0xe1, 0x7f, 0x11, 0xb0, 0xb7, 0x87, 0x2e, 0x42, 0xba, 0xe3, 0xb5, 0x87, 0xfc, 0xc4,
	0xd8, 0x1c, 0x0b, 0x7f, 0x63, 0xac, 0xe7, 0x60, 0xd2, 0xc1, 0x07, 0xa6, 0x8d, 0x75, 0xf9, 0x0b,
	0x09, 0x66, 0x1b, 0xfc, 0x2b, 0xf6, 0x1b, 0x11, 0x85, 0xae, 0xc3, 0x8c, 0x7f, 0xe9, 0xaa, 0x8a,
	0x5f, 0x2c, 0x7e, 0x64, 0xcf, 0xf6, 0xdf, 0xce, 0x46, 0x6e, 0x4e, 0x37, 0xc7, 0x94, 0x69, 0x2f,
	0x02, 0x44, 0x2f, 0xc1, 0x89, 0xf0, 0xfa, 0x5b, 0xf0, 0xf1, 0xd7, 0x83, 0x73, 0x51, 0x3e, 0x03,
	0xee, 0x60, 0x37, 0xc7, 0x94, 0x59, 0x1c, 0x03, 0x47, 0x8d, 0xff, 0x91, 0x04, 0x17, 0x8e, 0x4b,
	0x00, 0xe1, 0x94, 0x6f, 0xf3, 0x5f, 0x01, 0x2d, 0xa3, 0x1d, 0x7c, 0x5f, 0x8d, 0x90, 0x9b, 0x4a,
	0x70, 0x04, 0x5d, 0x80, 0x13, 0x16, 0x79, 0x48, 0xd5, 0x48, 0x3e, 0xf8, 0x1d, 0x72, 0x86, 0x81,
	0xb7, 0x82, 0x9c, 0xb8, 0xf4, 0x85, 0x04, 0xb9, 0xf0, 0xf7, 0x14, 0x2a, 0xc2, 0x42, 0xb3, 0xda,
	0xb8, 0xa5, 0x36, 0x9a, 0xd5, 0x66, 0x4d, 0xdd, 0xbe, 0xdb, 0xd8, 0xaa, 0x6d, 0xd4, 0x6f, 0xd4,
	0x6b, 0xd7, 0xf3, 0x63, 0xa8, 0x00, 0xf3, 0x11, 0x5c, 0x63, 0x7b, 0xfd, 0x4e, 0xbd, 0xd9, 0xac,
	0x5d, 0xcf, 0x4b, 0x68, 0x01, 0x50, 0x04, 0xf3, 0xca, 0x3d, 0xe5, 0x56, 0xfd, 0xee, 0xcd, 0x7c,
	0x2a, 0x71, 0x62, 0xe3, 0xde, 0x9d, 0xad, 0xdb, 0x35, 0x76, 0x22, 0x8d, 0x4e, 0xc1, 0x5c, 0x04,
	0x73, 0xa3, 0x5a, 0xbf, 0x5d, 0xbb, 0x9e, 0x1f, 0x4f, 0x1e, 0xa8, 0xde, 0xdd, 0xa8, 0xdd, 0x66,
	0x98, 0x09, 0x74, 0x16, 0x4e, 0x47, 0x30, 0xf5, 0xbb, 0x5b, 0xdb, 0x4d, 0x55, 0xa9, 0xbd, 0xbc,
	0x5d, 0x57, 0x6a, 0xd7, 0xf3, 0x19, 0xb4, 0x08, 0x27, 0x23, 0x68, 0xa5, 0xf6, 0x52, 0x6d, 0x83,
	0x09, 0x9a, 0x44, 0x67, 0xa0, 0x10, 0x41, 0x54, 0xb7, 0x9b, 0x9b, 0xbd, 0x63, 0xd9, 0x4b, 0x2f,
	0xc2, 0xb8, 0x62, 0x9b, 0x04, 0xcd, 0x43, 0x5e, 0xb9, 0x77, 0x3b, 0x69, 0xf0, 0x0c, 0xe4, 0x7c,
	0x68, 0xa3, 0xa6, 0xe4, 0x25, 0x34, 0x0b, 0xc0, 0x5f, 0xab, 0x37, 0x6b, 0x77, 0x9b, 0xf9, 0x54,
	0xe5, 0xb7, 0x00, 0x50, 0xad, 0x54, 0x1b, 0xc4, 0xdd, 0x37, 0x34, 0x82, 0x34, 0x98, 0x8a, 0x54,
	0x11, 0x2a, 0x0e, 0x98, 0x0f, 0xa2, 0xe0, 0x8a, 0x4b, 0x03, 0x71, 0x7e, 0xd8, 0xe5, 0xa5, 0x1f,
	0xfe, 0xf5, 0x9f, 0xef, 0xa7, 0x4e, 0xad, 0x49, 0x97, 0xe4, 0xfc, 0xea, 0xfe, 0xd5, 0x55, 0x91,
	0xd6, 0x6b, 0x1e, 0xb1, 0x74, 0xb4, 0x07, 0xf3, 0xec, 0x4c, 0x23, 0xb8, 0x04, 0x1a, 0x45, 0xda,
	0x42, 0xe4, 0xeb, 0x39, 0x52, 0x74, 0xf2, 0x59, 0x2e, 0x68, 0x91, 0x09, 0x42, 0x31, 0x41, 0x9c,
	0xec, 0x59, 0x09, 0x29, 0x30, 0x29, 0x26, 0x00, 0x0a, 0x79, 0xc4, 0xa7, 0x51, 0x31, 0x56, 0xaa,
	0xf2, 0x13, 0x8f, 0xaa, 0xbc, 0xcb, 0x71, 0xc6, 0xf3, 0x88, 0x73, 0x7d, 0x9b, 0x01, 0xae, 0xb1,
	0x0a, 0xf6, 0x56, 0x2f, 0xbd, 0x83, 0x5e, 0x07, 0xe8, 0x8d, 0x1f, 0x14, 0xae, 0xda, 0x7d, 0x23,
	0x29, 0xc1, 0xf9, 0x3c, 0x67, 0x59, 0x62, 0xba, 0x9e, 0xee, 0xe7, 0xba, 0xa6, 0xf1, 0xe3, 0xc8,
	0x83, 0x7c, 0xb2, 0x17, 0xa3, 0x58, 0xb9, 0x0e, 0xe8, 0xd2, 0x43, 0xdd, 0x23, 0x44, 0xa2, 0x33,
	0x03, 0xe4, 0x79, 0x3e, 0x9f, 0x1d, 0xf2, 0xac, 0x84, 0xfe, 0x20, 0xc1, 0xf2, 0x71, 0xc3, 0x0a,
	0xad, 0x86, 0x86, 0x8e, 0x36, 0xd6, 0x8a, 0x23, 0xd4, 0xba, 0x7c, 0xeb, 0x51, 0x75, 0xc6, 0x9f,
	0x0a, 0x97, 0xfd, 0xaa, 0xe7, 0x1a, 0xff, 0xdf, 0x5a, 0x30, 0x9a, 0x9e, 0xe1, 0x9a, 0xfb, 0x14,
	0x5c, 0xf7, 0xd5, 0x4b, 0xab, 0x83, 0xaf, 0x7e, 0xbc, 0x77, 0xd0, 0xaf, 0x25, 0x38, 0x7b, 0xe4,
	0xbc, 0x47, 0x97, 0x13, 0x39, 0xf0, 0xf5, 0x0d, 0x78, 0x31, 0x9a, 0x2f, 0x65, 0x74, 0xb9, 0xcf,
	0xd3, 0xc3, 0xd4, 0x65, 0x99, 0xf4, 0x3b, 0x09, 0x4a, 0x47, 0x77, 0x52, 0x74, 0x25, 0xd0, 0x61,
	0xa4, 0x91, 0x5b, 0x2c, 0x8f, 0x4a, 0x2e, 0x32, 0xe4, 0xda, 0xa3, 0xaa, 0x98, 0xca, 0x31, 0x03,
	0x22, 0x0e, 0x67, 0x8a, 0x0e, 0xb3, 0x01, 0x6d, 0xc1, 0x74, 0x74, 0x1a, 0xa3, 0xa5, 0x88, 0x7f,
	0x93, 0x33, 0xba, 0x38, 0xd7, 0xf7, 0x27, 0x40, 0xce, 0x73, 0xa9, 0x80, 0xb2, 0x4c, 0xaa, 0xc6,
	0x38, 0x7c, 0x20, 0xc1, 0xf2, 0x71, 0x7b, 0x57, 0x2f, 0x15, 0x47, 0xdc, 0xd0, 0x8a, 0x0b, 0x7d,
	0x6b, 0x6a, 0xad, 0xe3, 0xd0, 0x83, 0x44, 0xf4, 0x2e, 0x7d, 0xa9, 0xe8, 0xad, 0xff, 0x42, 0xfa,
	0xf0, 0x93, 0xd2, 0xd8, 0x47, 0x9f, 0x94, 0xc6, 0x3e, 0xfb, 0xa4, 0x24, 0xfd, 0xe0, 0xb0, 0x24,
	0x7d, 0x70, 0x58, 0x92, 0xfe, 0x74, 0x58, 0x92, 0x3e, 0x3c, 0x2c, 0x49, 0x1f, 0x1f, 0x96, 0xa4,
	0x7f, 0x1d, 0x96, 0xc6, 0x3e, 0x3b, 0x2c, 0x49, 0x3f, 0xfe, 0xb4, 0x34, 0xf6, 0xe1, 0xa7, 0xa5,
	0xb1, 0x8f, 0x3e, 0x2d, 0x8d, 0x01, 0x68, 0x76, 0x47, 0xe8, 0xbf, 0x9e, 0xad, 0x56, 0xf0, 0x16,
	0x53, 0x69, 0x4b, 0x7a, 0x4d, 0x6e, 0x1b, 0x74, 0xb7, 0xbb, 0x53, 0xd6, 0xec, 0xce, 0x2a, 0xae,
	0x60, 0xc7, 0xb5, 0xbf, 0x47, 0x34, 0xca, 0x1e, 0xaf, 0xb4, 0x6d, 0x0e, 0xd9, 0xf9, 0x79, 0x2a,
	0x5d, 0x7d, 0xf5, 0xd5, 0x5f, 0xa5, 0x32, 0xd5, 0x0a, 0x2e, 0xdf, 0xbf, 0xfa, 0x67, 0xfe, 0xf0,
	0xc6, 0xfd, 0xab, 0x87, 0x29, 0xe4, 0x3f, 0xbc, 0x71, 0x73, 0x6b, 0xfd, 0x8e, 0x58, 0xbc, 0xff,
	0x9d, 0x9a, 0xac, 0x56, 0xf0, 0xda, 0xda, 0xfd, 0xab, 0x3b, 0x19, 0x6e, 0xf6, 0x73, 0xff, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0x9e, 0x25, 0x29, 0x68, 0x87, 0x24, 0x00, 0x00,
}

func (x TaskState) String() string {
	s, ok := TaskState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Role) String() string {
	s, ok := Role_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SendMessageConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendMessageConfiguration)
	if !ok {
		that2, ok := that.(SendMessageConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.AcceptedOutputModes) != len(that1.AcceptedOutputModes) {
		return false
	}
	for i := range this.AcceptedOutputModes {
		if this.AcceptedOutputModes[i] != that1.AcceptedOutputModes[i] {
			return false
		}
	}
	if !this.PushNotification.Equal(that1.PushNotification) {
		return false
	}
	if this.HistoryLength != that1.HistoryLength {
		return false
	}
	if this.Blocking != that1.Blocking {
		return false
	}
	return true
}
func (this *Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Task)
	if !ok {
		that2, ok := that.(Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ContextId != that1.ContextId {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if len(this.Artifacts) != len(that1.Artifacts) {
		return false
	}
	for i := range this.Artifacts {
		if !this.Artifacts[i].Equal(that1.Artifacts[i]) {
			return false
		}
	}
	if len(this.History) != len(that1.History) {
		return false
	}
	for i := range this.History {
		if !this.History[i].Equal(that1.History[i]) {
			return false
		}
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *TaskStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskStatus)
	if !ok {
		that2, ok := that.(TaskStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	if !this.Timestamp.Equal(that1.Timestamp) {
		return false
	}
	return true
}
func (this *Part) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Part)
	if !ok {
		that2, ok := that.(Part)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Part == nil {
		if this.Part != nil {
			return false
		}
	} else if this.Part == nil {
		return false
	} else if !this.Part.Equal(that1.Part) {
		return false
	}
	return true
}
func (this *Part_Text) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Part_Text)
	if !ok {
		that2, ok := that.(Part_Text)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Text != that1.Text {
		return false
	}
	return true
}
func (this *Part_File) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Part_File)
	if !ok {
		that2, ok := that.(Part_File)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.File.Equal(that1.File) {
		return false
	}
	return true
}
func (this *Part_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Part_Data)
	if !ok {
		that2, ok := that.(Part_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *FilePart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilePart)
	if !ok {
		that2, ok := that.(FilePart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.File == nil {
		if this.File != nil {
			return false
		}
	} else if this.File == nil {
		return false
	} else if !this.File.Equal(that1.File) {
		return false
	}
	if this.MimeType != that1.MimeType {
		return false
	}
	return true
}
func (this *FilePart_FileWithUri) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilePart_FileWithUri)
	if !ok {
		that2, ok := that.(FilePart_FileWithUri)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileWithUri != that1.FileWithUri {
		return false
	}
	return true
}
func (this *FilePart_FileWithBytes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilePart_FileWithBytes)
	if !ok {
		that2, ok := that.(FilePart_FileWithBytes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.FileWithBytes, that1.FileWithBytes) {
		return false
	}
	return true
}
func (this *DataPart) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataPart)
	if !ok {
		that2, ok := that.(DataPart)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if this.ContextId != that1.ContextId {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.Role != that1.Role {
		return false
	}
	if len(this.Content) != len(that1.Content) {
		return false
	}
	for i := range this.Content {
		if !this.Content[i].Equal(that1.Content[i]) {
			return false
		}
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.Extensions) != len(that1.Extensions) {
		return false
	}
	for i := range this.Extensions {
		if this.Extensions[i] != that1.Extensions[i] {
			return false
		}
	}
	return true
}
func (this *Artifact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Artifact)
	if !ok {
		that2, ok := that.(Artifact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ArtifactId != that1.ArtifactId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Parts) != len(that1.Parts) {
		return false
	}
	for i := range this.Parts {
		if !this.Parts[i].Equal(that1.Parts[i]) {
			return false
		}
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if len(this.Extensions) != len(that1.Extensions) {
		return false
	}
	for i := range this.Extensions {
		if this.Extensions[i] != that1.Extensions[i] {
			return false
		}
	}
	return true
}
func (this *TaskStatusUpdateEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskStatusUpdateEvent)
	if !ok {
		that2, ok := that.(TaskStatusUpdateEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.ContextId != that1.ContextId {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.Final != that1.Final {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *TaskArtifactUpdateEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskArtifactUpdateEvent)
	if !ok {
		that2, ok := that.(TaskArtifactUpdateEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TaskId != that1.TaskId {
		return false
	}
	if this.ContextId != that1.ContextId {
		return false
	}
	if !this.Artifact.Equal(that1.Artifact) {
		return false
	}
	if this.Append != that1.Append {
		return false
	}
	if this.LastChunk != that1.LastChunk {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *PushNotificationConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushNotificationConfig)
	if !ok {
		that2, ok := that.(PushNotificationConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Token != that1.Token {
		return false
	}
	if !this.Authentication.Equal(that1.Authentication) {
		return false
	}
	return true
}
func (this *AuthenticationInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthenticationInfo)
	if !ok {
		that2, ok := that.(AuthenticationInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schemes) != len(that1.Schemes) {
		return false
	}
	for i := range this.Schemes {
		if this.Schemes[i] != that1.Schemes[i] {
			return false
		}
	}
	if this.Credentials != that1.Credentials {
		return false
	}
	return true
}
func (this *AgentInterface) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentInterface)
	if !ok {
		that2, ok := that.(AgentInterface)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Transport != that1.Transport {
		return false
	}
	return true
}
func (this *AgentCard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentCard)
	if !ok {
		that2, ok := that.(AgentCard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProtocolVersion != that1.ProtocolVersion {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.PreferredTransport != that1.PreferredTransport {
		return false
	}
	if len(this.AdditionalInterfaces) != len(that1.AdditionalInterfaces) {
		return false
	}
	for i := range this.AdditionalInterfaces {
		if !this.AdditionalInterfaces[i].Equal(that1.AdditionalInterfaces[i]) {
			return false
		}
	}
	if !this.Provider.Equal(that1.Provider) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.DocumentationUrl != that1.DocumentationUrl {
		return false
	}
	if !this.Capabilities.Equal(that1.Capabilities) {
		return false
	}
	if len(this.SecuritySchemes) != len(that1.SecuritySchemes) {
		return false
	}
	for i := range this.SecuritySchemes {
		if !this.SecuritySchemes[i].Equal(that1.SecuritySchemes[i]) {
			return false
		}
	}
	if len(this.Security) != len(that1.Security) {
		return false
	}
	for i := range this.Security {
		if !this.Security[i].Equal(that1.Security[i]) {
			return false
		}
	}
	if len(this.DefaultInputModes) != len(that1.DefaultInputModes) {
		return false
	}
	for i := range this.DefaultInputModes {
		if this.DefaultInputModes[i] != that1.DefaultInputModes[i] {
			return false
		}
	}
	if len(this.DefaultOutputModes) != len(that1.DefaultOutputModes) {
		return false
	}
	for i := range this.DefaultOutputModes {
		if this.DefaultOutputModes[i] != that1.DefaultOutputModes[i] {
			return false
		}
	}
	if len(this.Skills) != len(that1.Skills) {
		return false
	}
	for i := range this.Skills {
		if !this.Skills[i].Equal(that1.Skills[i]) {
			return false
		}
	}
	if this.SupportsAuthenticatedExtendedCard != that1.SupportsAuthenticatedExtendedCard {
		return false
	}
	return true
}
func (this *AgentProvider) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentProvider)
	if !ok {
		that2, ok := that.(AgentProvider)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Organization != that1.Organization {
		return false
	}
	return true
}
func (this *AgentCapabilities) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentCapabilities)
	if !ok {
		that2, ok := that.(AgentCapabilities)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Streaming != that1.Streaming {
		return false
	}
	if this.PushNotifications != that1.PushNotifications {
		return false
	}
	if len(this.Extensions) != len(that1.Extensions) {
		return false
	}
	for i := range this.Extensions {
		if !this.Extensions[i].Equal(that1.Extensions[i]) {
			return false
		}
	}
	return true
}
func (this *AgentExtension) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentExtension)
	if !ok {
		that2, ok := that.(AgentExtension)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Required != that1.Required {
		return false
	}
	if !this.Params.Equal(that1.Params) {
		return false
	}
	return true
}
func (this *AgentSkill) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AgentSkill)
	if !ok {
		that2, ok := that.(AgentSkill)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if len(this.Examples) != len(that1.Examples) {
		return false
	}
	for i := range this.Examples {
		if this.Examples[i] != that1.Examples[i] {
			return false
		}
	}
	if len(this.InputModes) != len(that1.InputModes) {
		return false
	}
	for i := range this.InputModes {
		if this.InputModes[i] != that1.InputModes[i] {
			return false
		}
	}
	if len(this.OutputModes) != len(that1.OutputModes) {
		return false
	}
	for i := range this.OutputModes {
		if this.OutputModes[i] != that1.OutputModes[i] {
			return false
		}
	}
	return true
}
func (this *TaskPushNotificationConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskPushNotificationConfig)
	if !ok {
		that2, ok := that.(TaskPushNotificationConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.PushNotificationConfig.Equal(that1.PushNotificationConfig) {
		return false
	}
	return true
}
func (this *StringList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StringList)
	if !ok {
		that2, ok := that.(StringList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if this.List[i] != that1.List[i] {
			return false
		}
	}
	return true
}
func (this *Security) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Security)
	if !ok {
		that2, ok := that.(Security)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Schemes) != len(that1.Schemes) {
		return false
	}
	for i := range this.Schemes {
		if !this.Schemes[i].Equal(that1.Schemes[i]) {
			return false
		}
	}
	return true
}
func (this *SecurityScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityScheme)
	if !ok {
		that2, ok := that.(SecurityScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Scheme == nil {
		if this.Scheme != nil {
			return false
		}
	} else if this.Scheme == nil {
		return false
	} else if !this.Scheme.Equal(that1.Scheme) {
		return false
	}
	return true
}
func (this *SecurityScheme_ApiKeySecurityScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityScheme_ApiKeySecurityScheme)
	if !ok {
		that2, ok := that.(SecurityScheme_ApiKeySecurityScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ApiKeySecurityScheme.Equal(that1.ApiKeySecurityScheme) {
		return false
	}
	return true
}
func (this *SecurityScheme_HttpAuthSecurityScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityScheme_HttpAuthSecurityScheme)
	if !ok {
		that2, ok := that.(SecurityScheme_HttpAuthSecurityScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.HttpAuthSecurityScheme.Equal(that1.HttpAuthSecurityScheme) {
		return false
	}
	return true
}
func (this *SecurityScheme_Oauth2SecurityScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityScheme_Oauth2SecurityScheme)
	if !ok {
		that2, ok := that.(SecurityScheme_Oauth2SecurityScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Oauth2SecurityScheme.Equal(that1.Oauth2SecurityScheme) {
		return false
	}
	return true
}
func (this *SecurityScheme_OpenIdConnectSecurityScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SecurityScheme_OpenIdConnectSecurityScheme)
	if !ok {
		that2, ok := that.(SecurityScheme_OpenIdConnectSecurityScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.OpenIdConnectSecurityScheme.Equal(that1.OpenIdConnectSecurityScheme) {
		return false
	}
	return true
}
func (this *APIKeySecurityScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*APIKeySecurityScheme)
	if !ok {
		that2, ok := that.(APIKeySecurityScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *HTTPAuthSecurityScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPAuthSecurityScheme)
	if !ok {
		that2, ok := that.(HTTPAuthSecurityScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Scheme != that1.Scheme {
		return false
	}
	if this.BearerFormat != that1.BearerFormat {
		return false
	}
	return true
}
func (this *OAuth2SecurityScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuth2SecurityScheme)
	if !ok {
		that2, ok := that.(OAuth2SecurityScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Flows.Equal(that1.Flows) {
		return false
	}
	return true
}
func (this *OpenIdConnectSecurityScheme) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenIdConnectSecurityScheme)
	if !ok {
		that2, ok := that.(OpenIdConnectSecurityScheme)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.OpenIdConnectUrl != that1.OpenIdConnectUrl {
		return false
	}
	return true
}
func (this *OAuthFlows) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuthFlows)
	if !ok {
		that2, ok := that.(OAuthFlows)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Flow == nil {
		if this.Flow != nil {
			return false
		}
	} else if this.Flow == nil {
		return false
	} else if !this.Flow.Equal(that1.Flow) {
		return false
	}
	return true
}
func (this *OAuthFlows_AuthorizationCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuthFlows_AuthorizationCode)
	if !ok {
		that2, ok := that.(OAuthFlows_AuthorizationCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthorizationCode.Equal(that1.AuthorizationCode) {
		return false
	}
	return true
}
func (this *OAuthFlows_ClientCredentials) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuthFlows_ClientCredentials)
	if !ok {
		that2, ok := that.(OAuthFlows_ClientCredentials)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClientCredentials.Equal(that1.ClientCredentials) {
		return false
	}
	return true
}
func (this *OAuthFlows_Implicit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuthFlows_Implicit)
	if !ok {
		that2, ok := that.(OAuthFlows_Implicit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Implicit.Equal(that1.Implicit) {
		return false
	}
	return true
}
func (this *OAuthFlows_Password) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OAuthFlows_Password)
	if !ok {
		that2, ok := that.(OAuthFlows_Password)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Password.Equal(that1.Password) {
		return false
	}
	return true
}
func (this *AuthorizationCodeOAuthFlow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizationCodeOAuthFlow)
	if !ok {
		that2, ok := that.(AuthorizationCodeOAuthFlow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthorizationUrl != that1.AuthorizationUrl {
		return false
	}
	if this.TokenUrl != that1.TokenUrl {
		return false
	}
	if this.RefreshUrl != that1.RefreshUrl {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	return true
}
func (this *ClientCredentialsOAuthFlow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClientCredentialsOAuthFlow)
	if !ok {
		that2, ok := that.(ClientCredentialsOAuthFlow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TokenUrl != that1.TokenUrl {
		return false
	}
	if this.RefreshUrl != that1.RefreshUrl {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	return true
}
func (this *ImplicitOAuthFlow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImplicitOAuthFlow)
	if !ok {
		that2, ok := that.(ImplicitOAuthFlow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuthorizationUrl != that1.AuthorizationUrl {
		return false
	}
	if this.RefreshUrl != that1.RefreshUrl {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	return true
}
func (this *PasswordOAuthFlow) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PasswordOAuthFlow)
	if !ok {
		that2, ok := that.(PasswordOAuthFlow)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TokenUrl != that1.TokenUrl {
		return false
	}
	if this.RefreshUrl != that1.RefreshUrl {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	return true
}
func (this *SendMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendMessageRequest)
	if !ok {
		that2, ok := that.(SendMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	return true
}
func (this *GetTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTaskRequest)
	if !ok {
		that2, ok := that.(GetTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.HistoryLength != that1.HistoryLength {
		return false
	}
	return true
}
func (this *CancelTaskRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelTaskRequest)
	if !ok {
		that2, ok := that.(CancelTaskRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GetTaskPushNotificationConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTaskPushNotificationConfigRequest)
	if !ok {
		that2, ok := that.(GetTaskPushNotificationConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *DeleteTaskPushNotificationConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteTaskPushNotificationConfigRequest)
	if !ok {
		that2, ok := that.(DeleteTaskPushNotificationConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreateTaskPushNotificationConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTaskPushNotificationConfigRequest)
	if !ok {
		that2, ok := that.(CreateTaskPushNotificationConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Parent != that1.Parent {
		return false
	}
	if this.ConfigId != that1.ConfigId {
		return false
	}
	if !this.Config.Equal(that1.Config) {
		return false
	}
	return true
}
func (this *TaskSubscriptionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TaskSubscriptionRequest)
	if !ok {
		that2, ok := that.(TaskSubscriptionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ListTaskPushNotificationConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTaskPushNotificationConfigRequest)
	if !ok {
		that2, ok := that.(ListTaskPushNotificationConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Parent != that1.Parent {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	return true
}
func (this *GetAgentCardRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAgentCardRequest)
	if !ok {
		that2, ok := that.(GetAgentCardRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SendMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendMessageResponse)
	if !ok {
		that2, ok := that.(SendMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *SendMessageResponse_Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendMessageResponse_Task)
	if !ok {
		that2, ok := that.(SendMessageResponse_Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *SendMessageResponse_Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendMessageResponse_Msg)
	if !ok {
		that2, ok := that.(SendMessageResponse_Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *StreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamResponse)
	if !ok {
		that2, ok := that.(StreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *StreamResponse_Task) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamResponse_Task)
	if !ok {
		that2, ok := that.(StreamResponse_Task)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	return true
}
func (this *StreamResponse_Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamResponse_Msg)
	if !ok {
		that2, ok := that.(StreamResponse_Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Msg.Equal(that1.Msg) {
		return false
	}
	return true
}
func (this *StreamResponse_StatusUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamResponse_StatusUpdate)
	if !ok {
		that2, ok := that.(StreamResponse_StatusUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StatusUpdate.Equal(that1.StatusUpdate) {
		return false
	}
	return true
}
func (this *StreamResponse_ArtifactUpdate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamResponse_ArtifactUpdate)
	if !ok {
		that2, ok := that.(StreamResponse_ArtifactUpdate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ArtifactUpdate.Equal(that1.ArtifactUpdate) {
		return false
	}
	return true
}
func (this *ListTaskPushNotificationConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTaskPushNotificationConfigResponse)
	if !ok {
		that2, ok := that.(ListTaskPushNotificationConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if !this.Configs[i].Equal(that1.Configs[i]) {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	return true
}
func (this *SendMessageConfiguration) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&a2apb.SendMessageConfiguration{")
	s = append(s, "AcceptedOutputModes: "+fmt.Sprintf("%#v", this.AcceptedOutputModes)+",\n")
	if this.PushNotification != nil {
		s = append(s, "PushNotification: "+fmt.Sprintf("%#v", this.PushNotification)+",\n")
	}
	s = append(s, "HistoryLength: "+fmt.Sprintf("%#v", this.HistoryLength)+",\n")
	s = append(s, "Blocking: "+fmt.Sprintf("%#v", this.Blocking)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&a2apb.Task{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ContextId: "+fmt.Sprintf("%#v", this.ContextId)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	if this.Artifacts != nil {
		s = append(s, "Artifacts: "+fmt.Sprintf("%#v", this.Artifacts)+",\n")
	}
	if this.History != nil {
		s = append(s, "History: "+fmt.Sprintf("%#v", this.History)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.TaskStatus{")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	if this.Update != nil {
		s = append(s, "Update: "+fmt.Sprintf("%#v", this.Update)+",\n")
	}
	if this.Timestamp != nil {
		s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Part) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.Part{")
	if this.Part != nil {
		s = append(s, "Part: "+fmt.Sprintf("%#v", this.Part)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Part_Text) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.Part_Text{` +
		`Text:` + fmt.Sprintf("%#v", this.Text) + `}`}, ", ")
	return s
}
func (this *Part_File) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.Part_File{` +
		`File:` + fmt.Sprintf("%#v", this.File) + `}`}, ", ")
	return s
}
func (this *Part_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.Part_Data{` +
		`Data:` + fmt.Sprintf("%#v", this.Data) + `}`}, ", ")
	return s
}
func (this *FilePart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.FilePart{")
	if this.File != nil {
		s = append(s, "File: "+fmt.Sprintf("%#v", this.File)+",\n")
	}
	s = append(s, "MimeType: "+fmt.Sprintf("%#v", this.MimeType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FilePart_FileWithUri) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.FilePart_FileWithUri{` +
		`FileWithUri:` + fmt.Sprintf("%#v", this.FileWithUri) + `}`}, ", ")
	return s
}
func (this *FilePart_FileWithBytes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.FilePart_FileWithBytes{` +
		`FileWithBytes:` + fmt.Sprintf("%#v", this.FileWithBytes) + `}`}, ", ")
	return s
}
func (this *DataPart) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&a2apb.DataPart{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&a2apb.Message{")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "ContextId: "+fmt.Sprintf("%#v", this.ContextId)+",\n")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "Role: "+fmt.Sprintf("%#v", this.Role)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "Extensions: "+fmt.Sprintf("%#v", this.Extensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Artifact) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&a2apb.Artifact{")
	s = append(s, "ArtifactId: "+fmt.Sprintf("%#v", this.ArtifactId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.Parts != nil {
		s = append(s, "Parts: "+fmt.Sprintf("%#v", this.Parts)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "Extensions: "+fmt.Sprintf("%#v", this.Extensions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskStatusUpdateEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&a2apb.TaskStatusUpdateEvent{")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "ContextId: "+fmt.Sprintf("%#v", this.ContextId)+",\n")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "Final: "+fmt.Sprintf("%#v", this.Final)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskArtifactUpdateEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&a2apb.TaskArtifactUpdateEvent{")
	s = append(s, "TaskId: "+fmt.Sprintf("%#v", this.TaskId)+",\n")
	s = append(s, "ContextId: "+fmt.Sprintf("%#v", this.ContextId)+",\n")
	if this.Artifact != nil {
		s = append(s, "Artifact: "+fmt.Sprintf("%#v", this.Artifact)+",\n")
	}
	s = append(s, "Append: "+fmt.Sprintf("%#v", this.Append)+",\n")
	s = append(s, "LastChunk: "+fmt.Sprintf("%#v", this.LastChunk)+",\n")
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushNotificationConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&a2apb.PushNotificationConfig{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Token: "+fmt.Sprintf("%#v", this.Token)+",\n")
	if this.Authentication != nil {
		s = append(s, "Authentication: "+fmt.Sprintf("%#v", this.Authentication)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthenticationInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&a2apb.AuthenticationInfo{")
	s = append(s, "Schemes: "+fmt.Sprintf("%#v", this.Schemes)+",\n")
	s = append(s, "Credentials: "+fmt.Sprintf("%#v", this.Credentials)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentInterface) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&a2apb.AgentInterface{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Transport: "+fmt.Sprintf("%#v", this.Transport)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentCard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&a2apb.AgentCard{")
	s = append(s, "ProtocolVersion: "+fmt.Sprintf("%#v", this.ProtocolVersion)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "PreferredTransport: "+fmt.Sprintf("%#v", this.PreferredTransport)+",\n")
	if this.AdditionalInterfaces != nil {
		s = append(s, "AdditionalInterfaces: "+fmt.Sprintf("%#v", this.AdditionalInterfaces)+",\n")
	}
	if this.Provider != nil {
		s = append(s, "Provider: "+fmt.Sprintf("%#v", this.Provider)+",\n")
	}
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "DocumentationUrl: "+fmt.Sprintf("%#v", this.DocumentationUrl)+",\n")
	if this.Capabilities != nil {
		s = append(s, "Capabilities: "+fmt.Sprintf("%#v", this.Capabilities)+",\n")
	}
	keysForSecuritySchemes := make([]string, 0, len(this.SecuritySchemes))
	for k, _ := range this.SecuritySchemes {
		keysForSecuritySchemes = append(keysForSecuritySchemes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSecuritySchemes)
	mapStringForSecuritySchemes := "map[string]*SecurityScheme{"
	for _, k := range keysForSecuritySchemes {
		mapStringForSecuritySchemes += fmt.Sprintf("%#v: %#v,", k, this.SecuritySchemes[k])
	}
	mapStringForSecuritySchemes += "}"
	if this.SecuritySchemes != nil {
		s = append(s, "SecuritySchemes: "+mapStringForSecuritySchemes+",\n")
	}
	if this.Security != nil {
		s = append(s, "Security: "+fmt.Sprintf("%#v", this.Security)+",\n")
	}
	s = append(s, "DefaultInputModes: "+fmt.Sprintf("%#v", this.DefaultInputModes)+",\n")
	s = append(s, "DefaultOutputModes: "+fmt.Sprintf("%#v", this.DefaultOutputModes)+",\n")
	if this.Skills != nil {
		s = append(s, "Skills: "+fmt.Sprintf("%#v", this.Skills)+",\n")
	}
	s = append(s, "SupportsAuthenticatedExtendedCard: "+fmt.Sprintf("%#v", this.SupportsAuthenticatedExtendedCard)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentProvider) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&a2apb.AgentProvider{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Organization: "+fmt.Sprintf("%#v", this.Organization)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentCapabilities) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.AgentCapabilities{")
	s = append(s, "Streaming: "+fmt.Sprintf("%#v", this.Streaming)+",\n")
	s = append(s, "PushNotifications: "+fmt.Sprintf("%#v", this.PushNotifications)+",\n")
	if this.Extensions != nil {
		s = append(s, "Extensions: "+fmt.Sprintf("%#v", this.Extensions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentExtension) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&a2apb.AgentExtension{")
	s = append(s, "Uri: "+fmt.Sprintf("%#v", this.Uri)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Required: "+fmt.Sprintf("%#v", this.Required)+",\n")
	if this.Params != nil {
		s = append(s, "Params: "+fmt.Sprintf("%#v", this.Params)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AgentSkill) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&a2apb.AgentSkill{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "Examples: "+fmt.Sprintf("%#v", this.Examples)+",\n")
	s = append(s, "InputModes: "+fmt.Sprintf("%#v", this.InputModes)+",\n")
	s = append(s, "OutputModes: "+fmt.Sprintf("%#v", this.OutputModes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskPushNotificationConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&a2apb.TaskPushNotificationConfig{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.PushNotificationConfig != nil {
		s = append(s, "PushNotificationConfig: "+fmt.Sprintf("%#v", this.PushNotificationConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StringList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&a2apb.StringList{")
	s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Security) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&a2apb.Security{")
	keysForSchemes := make([]string, 0, len(this.Schemes))
	for k, _ := range this.Schemes {
		keysForSchemes = append(keysForSchemes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSchemes)
	mapStringForSchemes := "map[string]*StringList{"
	for _, k := range keysForSchemes {
		mapStringForSchemes += fmt.Sprintf("%#v: %#v,", k, this.Schemes[k])
	}
	mapStringForSchemes += "}"
	if this.Schemes != nil {
		s = append(s, "Schemes: "+mapStringForSchemes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityScheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&a2apb.SecurityScheme{")
	if this.Scheme != nil {
		s = append(s, "Scheme: "+fmt.Sprintf("%#v", this.Scheme)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SecurityScheme_ApiKeySecurityScheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.SecurityScheme_ApiKeySecurityScheme{` +
		`ApiKeySecurityScheme:` + fmt.Sprintf("%#v", this.ApiKeySecurityScheme) + `}`}, ", ")
	return s
}
func (this *SecurityScheme_HttpAuthSecurityScheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.SecurityScheme_HttpAuthSecurityScheme{` +
		`HttpAuthSecurityScheme:` + fmt.Sprintf("%#v", this.HttpAuthSecurityScheme) + `}`}, ", ")
	return s
}
func (this *SecurityScheme_Oauth2SecurityScheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.SecurityScheme_Oauth2SecurityScheme{` +
		`Oauth2SecurityScheme:` + fmt.Sprintf("%#v", this.Oauth2SecurityScheme) + `}`}, ", ")
	return s
}
func (this *SecurityScheme_OpenIdConnectSecurityScheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.SecurityScheme_OpenIdConnectSecurityScheme{` +
		`OpenIdConnectSecurityScheme:` + fmt.Sprintf("%#v", this.OpenIdConnectSecurityScheme) + `}`}, ", ")
	return s
}
func (this *APIKeySecurityScheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.APIKeySecurityScheme{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Location: "+fmt.Sprintf("%#v", this.Location)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HTTPAuthSecurityScheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.HTTPAuthSecurityScheme{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Scheme: "+fmt.Sprintf("%#v", this.Scheme)+",\n")
	s = append(s, "BearerFormat: "+fmt.Sprintf("%#v", this.BearerFormat)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OAuth2SecurityScheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&a2apb.OAuth2SecurityScheme{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.Flows != nil {
		s = append(s, "Flows: "+fmt.Sprintf("%#v", this.Flows)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenIdConnectSecurityScheme) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&a2apb.OpenIdConnectSecurityScheme{")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "OpenIdConnectUrl: "+fmt.Sprintf("%#v", this.OpenIdConnectUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OAuthFlows) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&a2apb.OAuthFlows{")
	if this.Flow != nil {
		s = append(s, "Flow: "+fmt.Sprintf("%#v", this.Flow)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OAuthFlows_AuthorizationCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.OAuthFlows_AuthorizationCode{` +
		`AuthorizationCode:` + fmt.Sprintf("%#v", this.AuthorizationCode) + `}`}, ", ")
	return s
}
func (this *OAuthFlows_ClientCredentials) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.OAuthFlows_ClientCredentials{` +
		`ClientCredentials:` + fmt.Sprintf("%#v", this.ClientCredentials) + `}`}, ", ")
	return s
}
func (this *OAuthFlows_Implicit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.OAuthFlows_Implicit{` +
		`Implicit:` + fmt.Sprintf("%#v", this.Implicit) + `}`}, ", ")
	return s
}
func (this *OAuthFlows_Password) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.OAuthFlows_Password{` +
		`Password:` + fmt.Sprintf("%#v", this.Password) + `}`}, ", ")
	return s
}
func (this *AuthorizationCodeOAuthFlow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&a2apb.AuthorizationCodeOAuthFlow{")
	s = append(s, "AuthorizationUrl: "+fmt.Sprintf("%#v", this.AuthorizationUrl)+",\n")
	s = append(s, "TokenUrl: "+fmt.Sprintf("%#v", this.TokenUrl)+",\n")
	s = append(s, "RefreshUrl: "+fmt.Sprintf("%#v", this.RefreshUrl)+",\n")
	keysForScopes := make([]string, 0, len(this.Scopes))
	for k, _ := range this.Scopes {
		keysForScopes = append(keysForScopes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScopes)
	mapStringForScopes := "map[string]string{"
	for _, k := range keysForScopes {
		mapStringForScopes += fmt.Sprintf("%#v: %#v,", k, this.Scopes[k])
	}
	mapStringForScopes += "}"
	if this.Scopes != nil {
		s = append(s, "Scopes: "+mapStringForScopes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClientCredentialsOAuthFlow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.ClientCredentialsOAuthFlow{")
	s = append(s, "TokenUrl: "+fmt.Sprintf("%#v", this.TokenUrl)+",\n")
	s = append(s, "RefreshUrl: "+fmt.Sprintf("%#v", this.RefreshUrl)+",\n")
	keysForScopes := make([]string, 0, len(this.Scopes))
	for k, _ := range this.Scopes {
		keysForScopes = append(keysForScopes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScopes)
	mapStringForScopes := "map[string]string{"
	for _, k := range keysForScopes {
		mapStringForScopes += fmt.Sprintf("%#v: %#v,", k, this.Scopes[k])
	}
	mapStringForScopes += "}"
	if this.Scopes != nil {
		s = append(s, "Scopes: "+mapStringForScopes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImplicitOAuthFlow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.ImplicitOAuthFlow{")
	s = append(s, "AuthorizationUrl: "+fmt.Sprintf("%#v", this.AuthorizationUrl)+",\n")
	s = append(s, "RefreshUrl: "+fmt.Sprintf("%#v", this.RefreshUrl)+",\n")
	keysForScopes := make([]string, 0, len(this.Scopes))
	for k, _ := range this.Scopes {
		keysForScopes = append(keysForScopes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScopes)
	mapStringForScopes := "map[string]string{"
	for _, k := range keysForScopes {
		mapStringForScopes += fmt.Sprintf("%#v: %#v,", k, this.Scopes[k])
	}
	mapStringForScopes += "}"
	if this.Scopes != nil {
		s = append(s, "Scopes: "+mapStringForScopes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PasswordOAuthFlow) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.PasswordOAuthFlow{")
	s = append(s, "TokenUrl: "+fmt.Sprintf("%#v", this.TokenUrl)+",\n")
	s = append(s, "RefreshUrl: "+fmt.Sprintf("%#v", this.RefreshUrl)+",\n")
	keysForScopes := make([]string, 0, len(this.Scopes))
	for k, _ := range this.Scopes {
		keysForScopes = append(keysForScopes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScopes)
	mapStringForScopes := "map[string]string{"
	for _, k := range keysForScopes {
		mapStringForScopes += fmt.Sprintf("%#v: %#v,", k, this.Scopes[k])
	}
	mapStringForScopes += "}"
	if this.Scopes != nil {
		s = append(s, "Scopes: "+mapStringForScopes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.SendMessageRequest{")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	if this.Configuration != nil {
		s = append(s, "Configuration: "+fmt.Sprintf("%#v", this.Configuration)+",\n")
	}
	if this.Metadata != nil {
		s = append(s, "Metadata: "+fmt.Sprintf("%#v", this.Metadata)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&a2apb.GetTaskRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "HistoryLength: "+fmt.Sprintf("%#v", this.HistoryLength)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelTaskRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&a2apb.CancelTaskRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTaskPushNotificationConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&a2apb.GetTaskPushNotificationConfigRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteTaskPushNotificationConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&a2apb.DeleteTaskPushNotificationConfigRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTaskPushNotificationConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.CreateTaskPushNotificationConfigRequest{")
	s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	s = append(s, "ConfigId: "+fmt.Sprintf("%#v", this.ConfigId)+",\n")
	if this.Config != nil {
		s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TaskSubscriptionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&a2apb.TaskSubscriptionRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTaskPushNotificationConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&a2apb.ListTaskPushNotificationConfigRequest{")
	s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAgentCardRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&a2apb.GetAgentCardRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&a2apb.SendMessageResponse{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageResponse_Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.SendMessageResponse_Task{` +
		`Task:` + fmt.Sprintf("%#v", this.Task) + `}`}, ", ")
	return s
}
func (this *SendMessageResponse_Msg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.SendMessageResponse_Msg{` +
		`Msg:` + fmt.Sprintf("%#v", this.Msg) + `}`}, ", ")
	return s
}
func (this *StreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&a2apb.StreamResponse{")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamResponse_Task) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.StreamResponse_Task{` +
		`Task:` + fmt.Sprintf("%#v", this.Task) + `}`}, ", ")
	return s
}
func (this *StreamResponse_Msg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.StreamResponse_Msg{` +
		`Msg:` + fmt.Sprintf("%#v", this.Msg) + `}`}, ", ")
	return s
}
func (this *StreamResponse_StatusUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.StreamResponse_StatusUpdate{` +
		`StatusUpdate:` + fmt.Sprintf("%#v", this.StatusUpdate) + `}`}, ", ")
	return s
}
func (this *StreamResponse_ArtifactUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&a2apb.StreamResponse_ArtifactUpdate{` +
		`ArtifactUpdate:` + fmt.Sprintf("%#v", this.ArtifactUpdate) + `}`}, ", ")
	return s
}
func (this *ListTaskPushNotificationConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&a2apb.ListTaskPushNotificationConfigResponse{")
	if this.Configs != nil {
		s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringA2A(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SendMessageConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMessageConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMessageConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Blocking {
		i--
		if m.Blocking {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.HistoryLength != 0 {
		i = encodeVarintA2A(dAtA, i, uint64(m.HistoryLength))
		i--
		dAtA[i] = 0x18
	}
	if m.PushNotification != nil {
		{
			size, err := m.PushNotification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AcceptedOutputModes) > 0 {
		for iNdEx := len(m.AcceptedOutputModes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AcceptedOutputModes[iNdEx])
			copy(dAtA[i:], m.AcceptedOutputModes[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.AcceptedOutputModes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2A(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Artifacts) > 0 {
		for iNdEx := len(m.Artifacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Artifacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2A(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Update != nil {
		{
			size, err := m.Update.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.State != 0 {
		i = encodeVarintA2A(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Part) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Part) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Part) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Part != nil {
		{
			size := m.Part.Size()
			i -= size
			if _, err := m.Part.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Part_Text) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Part_Text) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Text)
	copy(dAtA[i:], m.Text)
	i = encodeVarintA2A(dAtA, i, uint64(len(m.Text)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *Part_File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Part_File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Part_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Part_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *FilePart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FilePart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilePart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.File != nil {
		{
			size := m.File.Size()
			i -= size
			if _, err := m.File.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FilePart_FileWithUri) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilePart_FileWithUri) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.FileWithUri)
	copy(dAtA[i:], m.FileWithUri)
	i = encodeVarintA2A(dAtA, i, uint64(len(m.FileWithUri)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *FilePart_FileWithBytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FilePart_FileWithBytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FileWithBytes != nil {
		i -= len(m.FileWithBytes)
		copy(dAtA[i:], m.FileWithBytes)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.FileWithBytes)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DataPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataPart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataPart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extensions) > 0 {
		for iNdEx := len(m.Extensions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Extensions[iNdEx])
			copy(dAtA[i:], m.Extensions[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.Extensions[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Content) > 0 {
		for iNdEx := len(m.Content) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Content[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2A(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Role != 0 {
		i = encodeVarintA2A(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Artifact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Artifact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Artifact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extensions) > 0 {
		for iNdEx := len(m.Extensions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Extensions[iNdEx])
			copy(dAtA[i:], m.Extensions[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.Extensions[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Parts) > 0 {
		for iNdEx := len(m.Parts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Parts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2A(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ArtifactId) > 0 {
		i -= len(m.ArtifactId)
		copy(dAtA[i:], m.ArtifactId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.ArtifactId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskStatusUpdateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskStatusUpdateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskStatusUpdateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Final {
		i--
		if m.Final {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskArtifactUpdateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskArtifactUpdateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskArtifactUpdateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastChunk {
		i--
		if m.LastChunk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Append {
		i--
		if m.Append {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Artifact != nil {
		{
			size, err := m.Artifact.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContextId) > 0 {
		i -= len(m.ContextId)
		copy(dAtA[i:], m.ContextId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.ContextId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TaskId) > 0 {
		i -= len(m.TaskId)
		copy(dAtA[i:], m.TaskId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.TaskId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushNotificationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushNotificationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushNotificationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Authentication != nil {
		{
			size, err := m.Authentication.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthenticationInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthenticationInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Credentials) > 0 {
		i -= len(m.Credentials)
		copy(dAtA[i:], m.Credentials)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Credentials)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Schemes) > 0 {
		for iNdEx := len(m.Schemes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Schemes[iNdEx])
			copy(dAtA[i:], m.Schemes[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.Schemes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AgentInterface) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentInterface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentInterface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transport) > 0 {
		i -= len(m.Transport)
		copy(dAtA[i:], m.Transport)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Transport)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocolVersion) > 0 {
		i -= len(m.ProtocolVersion)
		copy(dAtA[i:], m.ProtocolVersion)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.ProtocolVersion)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.AdditionalInterfaces) > 0 {
		for iNdEx := len(m.AdditionalInterfaces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdditionalInterfaces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2A(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.PreferredTransport) > 0 {
		i -= len(m.PreferredTransport)
		copy(dAtA[i:], m.PreferredTransport)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.PreferredTransport)))
		i--
		dAtA[i] = 0x72
	}
	if m.SupportsAuthenticatedExtendedCard {
		i--
		if m.SupportsAuthenticatedExtendedCard {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.Skills) > 0 {
		for iNdEx := len(m.Skills) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Skills[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2A(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.DefaultOutputModes) > 0 {
		for iNdEx := len(m.DefaultOutputModes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DefaultOutputModes[iNdEx])
			copy(dAtA[i:], m.DefaultOutputModes[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.DefaultOutputModes[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.DefaultInputModes) > 0 {
		for iNdEx := len(m.DefaultInputModes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DefaultInputModes[iNdEx])
			copy(dAtA[i:], m.DefaultInputModes[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.DefaultInputModes[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Security) > 0 {
		for iNdEx := len(m.Security) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Security[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2A(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.SecuritySchemes) > 0 {
		for k := range m.SecuritySchemes {
			v := m.SecuritySchemes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintA2A(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintA2A(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintA2A(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Capabilities != nil {
		{
			size, err := m.Capabilities.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DocumentationUrl) > 0 {
		i -= len(m.DocumentationUrl)
		copy(dAtA[i:], m.DocumentationUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.DocumentationUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Provider != nil {
		{
			size, err := m.Provider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Organization) > 0 {
		i -= len(m.Organization)
		copy(dAtA[i:], m.Organization)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Organization)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentCapabilities) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentCapabilities) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentCapabilities) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extensions) > 0 {
		for iNdEx := len(m.Extensions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Extensions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2A(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PushNotifications {
		i--
		if m.PushNotifications {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Streaming {
		i--
		if m.Streaming {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AgentExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Required {
		i--
		if m.Required {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AgentSkill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentSkill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AgentSkill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputModes) > 0 {
		for iNdEx := len(m.OutputModes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OutputModes[iNdEx])
			copy(dAtA[i:], m.OutputModes[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.OutputModes[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.InputModes) > 0 {
		for iNdEx := len(m.InputModes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InputModes[iNdEx])
			copy(dAtA[i:], m.InputModes[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.InputModes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Examples) > 0 {
		for iNdEx := len(m.Examples) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Examples[iNdEx])
			copy(dAtA[i:], m.Examples[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.Examples[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskPushNotificationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskPushNotificationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskPushNotificationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PushNotificationConfig != nil {
		{
			size, err := m.PushNotificationConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StringList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.List[iNdEx])
			copy(dAtA[i:], m.List[iNdEx])
			i = encodeVarintA2A(dAtA, i, uint64(len(m.List[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Security) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Security) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Security) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Schemes) > 0 {
		for k := range m.Schemes {
			v := m.Schemes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintA2A(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintA2A(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintA2A(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SecurityScheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Scheme != nil {
		{
			size := m.Scheme.Size()
			i -= size
			if _, err := m.Scheme.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SecurityScheme_ApiKeySecurityScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityScheme_ApiKeySecurityScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ApiKeySecurityScheme != nil {
		{
			size, err := m.ApiKeySecurityScheme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SecurityScheme_HttpAuthSecurityScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityScheme_HttpAuthSecurityScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.HttpAuthSecurityScheme != nil {
		{
			size, err := m.HttpAuthSecurityScheme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *SecurityScheme_Oauth2SecurityScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityScheme_Oauth2SecurityScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Oauth2SecurityScheme != nil {
		{
			size, err := m.Oauth2SecurityScheme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *SecurityScheme_OpenIdConnectSecurityScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityScheme_OpenIdConnectSecurityScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OpenIdConnectSecurityScheme != nil {
		{
			size, err := m.OpenIdConnectSecurityScheme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *APIKeySecurityScheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIKeySecurityScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *APIKeySecurityScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HTTPAuthSecurityScheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPAuthSecurityScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPAuthSecurityScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BearerFormat) > 0 {
		i -= len(m.BearerFormat)
		copy(dAtA[i:], m.BearerFormat)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.BearerFormat)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Scheme) > 0 {
		i -= len(m.Scheme)
		copy(dAtA[i:], m.Scheme)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Scheme)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OAuth2SecurityScheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuth2SecurityScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OAuth2SecurityScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Flows != nil {
		{
			size, err := m.Flows.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OpenIdConnectSecurityScheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenIdConnectSecurityScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OpenIdConnectSecurityScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OpenIdConnectUrl) > 0 {
		i -= len(m.OpenIdConnectUrl)
		copy(dAtA[i:], m.OpenIdConnectUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.OpenIdConnectUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OAuthFlows) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OAuthFlows) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OAuthFlows) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Flow != nil {
		{
			size := m.Flow.Size()
			i -= size
			if _, err := m.Flow.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OAuthFlows_AuthorizationCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OAuthFlows_AuthorizationCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AuthorizationCode != nil {
		{
			size, err := m.AuthorizationCode.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *OAuthFlows_ClientCredentials) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OAuthFlows_ClientCredentials) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ClientCredentials != nil {
		{
			size, err := m.ClientCredentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *OAuthFlows_Implicit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OAuthFlows_Implicit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Implicit != nil {
		{
			size, err := m.Implicit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *OAuthFlows_Password) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OAuthFlows_Password) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AuthorizationCodeOAuthFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizationCodeOAuthFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizationCodeOAuthFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scopes) > 0 {
		for k := range m.Scopes {
			v := m.Scopes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintA2A(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintA2A(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintA2A(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RefreshUrl) > 0 {
		i -= len(m.RefreshUrl)
		copy(dAtA[i:], m.RefreshUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.RefreshUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenUrl) > 0 {
		i -= len(m.TokenUrl)
		copy(dAtA[i:], m.TokenUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.TokenUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthorizationUrl) > 0 {
		i -= len(m.AuthorizationUrl)
		copy(dAtA[i:], m.AuthorizationUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.AuthorizationUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientCredentialsOAuthFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientCredentialsOAuthFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientCredentialsOAuthFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scopes) > 0 {
		for k := range m.Scopes {
			v := m.Scopes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintA2A(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintA2A(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintA2A(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RefreshUrl) > 0 {
		i -= len(m.RefreshUrl)
		copy(dAtA[i:], m.RefreshUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.RefreshUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenUrl) > 0 {
		i -= len(m.TokenUrl)
		copy(dAtA[i:], m.TokenUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.TokenUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImplicitOAuthFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImplicitOAuthFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImplicitOAuthFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scopes) > 0 {
		for k := range m.Scopes {
			v := m.Scopes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintA2A(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintA2A(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintA2A(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RefreshUrl) > 0 {
		i -= len(m.RefreshUrl)
		copy(dAtA[i:], m.RefreshUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.RefreshUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthorizationUrl) > 0 {
		i -= len(m.AuthorizationUrl)
		copy(dAtA[i:], m.AuthorizationUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.AuthorizationUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PasswordOAuthFlow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordOAuthFlow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PasswordOAuthFlow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scopes) > 0 {
		for k := range m.Scopes {
			v := m.Scopes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintA2A(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintA2A(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintA2A(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RefreshUrl) > 0 {
		i -= len(m.RefreshUrl)
		copy(dAtA[i:], m.RefreshUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.RefreshUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenUrl) > 0 {
		i -= len(m.TokenUrl)
		copy(dAtA[i:], m.TokenUrl)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.TokenUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HistoryLength != 0 {
		i = encodeVarintA2A(dAtA, i, uint64(m.HistoryLength))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelTaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTaskRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelTaskRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTaskPushNotificationConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTaskPushNotificationConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTaskPushNotificationConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTaskPushNotificationConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTaskPushNotificationConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTaskPushNotificationConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTaskPushNotificationConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTaskPushNotificationConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTaskPushNotificationConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConfigId) > 0 {
		i -= len(m.ConfigId)
		copy(dAtA[i:], m.ConfigId)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.ConfigId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTaskPushNotificationConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskPushNotificationConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskPushNotificationConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintA2A(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAgentCardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAgentCardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAgentCardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SendMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SendMessageResponse_Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMessageResponse_Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SendMessageResponse_Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMessageResponse_Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *StreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamResponse_Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResponse_Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Task != nil {
		{
			size, err := m.Task.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *StreamResponse_Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResponse_Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *StreamResponse_StatusUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResponse_StatusUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.StatusUpdate != nil {
		{
			size, err := m.StatusUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *StreamResponse_ArtifactUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResponse_ArtifactUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ArtifactUpdate != nil {
		{
			size, err := m.ArtifactUpdate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2A(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ListTaskPushNotificationConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTaskPushNotificationConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTaskPushNotificationConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintA2A(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Configs) > 0 {
		for iNdEx := len(m.Configs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Configs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2A(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintA2A(dAtA []byte, offset int, v uint64) int {
	offset -= sovA2A(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SendMessageConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AcceptedOutputModes) > 0 {
		for _, s := range m.AcceptedOutputModes {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if m.PushNotification != nil {
		l = m.PushNotification.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.HistoryLength != 0 {
		n += 1 + sovA2A(uint64(m.HistoryLength))
	}
	if m.Blocking {
		n += 2
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.Artifacts) > 0 {
		for _, e := range m.Artifacts {
			l = e.Size()
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *TaskStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovA2A(uint64(m.State))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *Part) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Part != nil {
		n += m.Part.Size()
	}
	return n
}

func (m *Part_Text) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	n += 1 + l + sovA2A(uint64(l))
	return n
}
func (m *Part_File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *Part_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *FilePart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		n += m.File.Size()
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *FilePart_FileWithUri) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileWithUri)
	n += 1 + l + sovA2A(uint64(l))
	return n
}
func (m *FilePart_FileWithBytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileWithBytes != nil {
		l = len(m.FileWithBytes)
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *DataPart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovA2A(uint64(m.Role))
	}
	if len(m.Content) > 0 {
		for _, e := range m.Content {
			l = e.Size()
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.Extensions) > 0 {
		for _, s := range m.Extensions {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	return n
}

func (m *Artifact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ArtifactId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.Parts) > 0 {
		for _, e := range m.Parts {
			l = e.Size()
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.Extensions) > 0 {
		for _, s := range m.Extensions {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	return n
}

func (m *TaskStatusUpdateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Final {
		n += 2
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *TaskArtifactUpdateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.ContextId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Artifact != nil {
		l = m.Artifact.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Append {
		n += 2
	}
	if m.LastChunk {
		n += 2
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *PushNotificationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Authentication != nil {
		l = m.Authentication.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *AuthenticationInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemes) > 0 {
		for _, s := range m.Schemes {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	l = len(m.Credentials)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *AgentInterface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Transport)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *AgentCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Provider != nil {
		l = m.Provider.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.DocumentationUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Capabilities != nil {
		l = m.Capabilities.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.SecuritySchemes) > 0 {
		for k, v := range m.SecuritySchemes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovA2A(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovA2A(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovA2A(uint64(mapEntrySize))
		}
	}
	if len(m.Security) > 0 {
		for _, e := range m.Security {
			l = e.Size()
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if len(m.DefaultInputModes) > 0 {
		for _, s := range m.DefaultInputModes {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if len(m.DefaultOutputModes) > 0 {
		for _, s := range m.DefaultOutputModes {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if len(m.Skills) > 0 {
		for _, e := range m.Skills {
			l = e.Size()
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if m.SupportsAuthenticatedExtendedCard {
		n += 2
	}
	l = len(m.PreferredTransport)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.AdditionalInterfaces) > 0 {
		for _, e := range m.AdditionalInterfaces {
			l = e.Size()
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	l = len(m.ProtocolVersion)
	if l > 0 {
		n += 2 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *AgentProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Organization)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *AgentCapabilities) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Streaming {
		n += 2
	}
	if m.PushNotifications {
		n += 2
	}
	if len(m.Extensions) > 0 {
		for _, e := range m.Extensions {
			l = e.Size()
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	return n
}

func (m *AgentExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Required {
		n += 2
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *AgentSkill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if len(m.Examples) > 0 {
		for _, s := range m.Examples {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if len(m.InputModes) > 0 {
		for _, s := range m.InputModes {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	if len(m.OutputModes) > 0 {
		for _, s := range m.OutputModes {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	return n
}

func (m *TaskPushNotificationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.PushNotificationConfig != nil {
		l = m.PushNotificationConfig.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *StringList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	return n
}

func (m *Security) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Schemes) > 0 {
		for k, v := range m.Schemes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovA2A(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovA2A(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovA2A(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SecurityScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scheme != nil {
		n += m.Scheme.Size()
	}
	return n
}

func (m *SecurityScheme_ApiKeySecurityScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiKeySecurityScheme != nil {
		l = m.ApiKeySecurityScheme.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *SecurityScheme_HttpAuthSecurityScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HttpAuthSecurityScheme != nil {
		l = m.HttpAuthSecurityScheme.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *SecurityScheme_Oauth2SecurityScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oauth2SecurityScheme != nil {
		l = m.Oauth2SecurityScheme.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *SecurityScheme_OpenIdConnectSecurityScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OpenIdConnectSecurityScheme != nil {
		l = m.OpenIdConnectSecurityScheme.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *APIKeySecurityScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *HTTPAuthSecurityScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.Scheme)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.BearerFormat)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *OAuth2SecurityScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Flows != nil {
		l = m.Flows.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *OpenIdConnectSecurityScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.OpenIdConnectUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *OAuthFlows) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flow != nil {
		n += m.Flow.Size()
	}
	return n
}

func (m *OAuthFlows_AuthorizationCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthorizationCode != nil {
		l = m.AuthorizationCode.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *OAuthFlows_ClientCredentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientCredentials != nil {
		l = m.ClientCredentials.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *OAuthFlows_Implicit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Implicit != nil {
		l = m.Implicit.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *OAuthFlows_Password) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *AuthorizationCodeOAuthFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthorizationUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.TokenUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.RefreshUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.Scopes) > 0 {
		for k, v := range m.Scopes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovA2A(uint64(len(k))) + 1 + len(v) + sovA2A(uint64(len(v)))
			n += mapEntrySize + 1 + sovA2A(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClientCredentialsOAuthFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.RefreshUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.Scopes) > 0 {
		for k, v := range m.Scopes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovA2A(uint64(len(k))) + 1 + len(v) + sovA2A(uint64(len(v)))
			n += mapEntrySize + 1 + sovA2A(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ImplicitOAuthFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthorizationUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.RefreshUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.Scopes) > 0 {
		for k, v := range m.Scopes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovA2A(uint64(len(k))) + 1 + len(v) + sovA2A(uint64(len(v)))
			n += mapEntrySize + 1 + sovA2A(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *PasswordOAuthFlow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.RefreshUrl)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if len(m.Scopes) > 0 {
		for k, v := range m.Scopes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovA2A(uint64(len(k))) + 1 + len(v) + sovA2A(uint64(len(v)))
			n += mapEntrySize + 1 + sovA2A(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SendMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *GetTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.HistoryLength != 0 {
		n += 1 + sovA2A(uint64(m.HistoryLength))
	}
	return n
}

func (m *CancelTaskRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *GetTaskPushNotificationConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *DeleteTaskPushNotificationConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *CreateTaskPushNotificationConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	l = len(m.ConfigId)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *TaskSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *ListTaskPushNotificationConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovA2A(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func (m *GetAgentCardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SendMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *SendMessageResponse_Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *SendMessageResponse_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *StreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *StreamResponse_Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *StreamResponse_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *StreamResponse_StatusUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatusUpdate != nil {
		l = m.StatusUpdate.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *StreamResponse_ArtifactUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ArtifactUpdate != nil {
		l = m.ArtifactUpdate.Size()
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}
func (m *ListTaskPushNotificationConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Configs) > 0 {
		for _, e := range m.Configs {
			l = e.Size()
			n += 1 + l + sovA2A(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovA2A(uint64(l))
	}
	return n
}

func sovA2A(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozA2A(x uint64) (n int) {
	return sovA2A(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SendMessageConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageConfiguration{`,
		`AcceptedOutputModes:` + fmt.Sprintf("%v", this.AcceptedOutputModes) + `,`,
		`PushNotification:` + strings.Replace(this.PushNotification.String(), "PushNotificationConfig", "PushNotificationConfig", 1) + `,`,
		`HistoryLength:` + fmt.Sprintf("%v", this.HistoryLength) + `,`,
		`Blocking:` + fmt.Sprintf("%v", this.Blocking) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Task) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArtifacts := "[]*Artifact{"
	for _, f := range this.Artifacts {
		repeatedStringForArtifacts += strings.Replace(f.String(), "Artifact", "Artifact", 1) + ","
	}
	repeatedStringForArtifacts += "}"
	repeatedStringForHistory := "[]*Message{"
	for _, f := range this.History {
		repeatedStringForHistory += strings.Replace(f.String(), "Message", "Message", 1) + ","
	}
	repeatedStringForHistory += "}"
	s := strings.Join([]string{`&Task{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ContextId:` + fmt.Sprintf("%v", this.ContextId) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "TaskStatus", "TaskStatus", 1) + `,`,
		`Artifacts:` + repeatedStringForArtifacts + `,`,
		`History:` + repeatedStringForHistory + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Struct", "structpb.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskStatus{`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Update:` + strings.Replace(this.Update.String(), "Message", "Message", 1) + `,`,
		`Timestamp:` + strings.Replace(fmt.Sprintf("%v", this.Timestamp), "Timestamp", "timestamppb.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Part) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Part{`,
		`Part:` + fmt.Sprintf("%v", this.Part) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Part_Text) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Part_Text{`,
		`Text:` + fmt.Sprintf("%v", this.Text) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Part_File) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Part_File{`,
		`File:` + strings.Replace(fmt.Sprintf("%v", this.File), "FilePart", "FilePart", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Part_Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Part_Data{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "DataPart", "DataPart", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilePart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilePart{`,
		`File:` + fmt.Sprintf("%v", this.File) + `,`,
		`MimeType:` + fmt.Sprintf("%v", this.MimeType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilePart_FileWithUri) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilePart_FileWithUri{`,
		`FileWithUri:` + fmt.Sprintf("%v", this.FileWithUri) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FilePart_FileWithBytes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FilePart_FileWithBytes{`,
		`FileWithBytes:` + fmt.Sprintf("%v", this.FileWithBytes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataPart) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataPart{`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Struct", "structpb.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContent := "[]*Part{"
	for _, f := range this.Content {
		repeatedStringForContent += strings.Replace(f.String(), "Part", "Part", 1) + ","
	}
	repeatedStringForContent += "}"
	s := strings.Join([]string{`&Message{`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`ContextId:` + fmt.Sprintf("%v", this.ContextId) + `,`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`Content:` + repeatedStringForContent + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Struct", "structpb.Struct", 1) + `,`,
		`Extensions:` + fmt.Sprintf("%v", this.Extensions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Artifact) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForParts := "[]*Part{"
	for _, f := range this.Parts {
		repeatedStringForParts += strings.Replace(f.String(), "Part", "Part", 1) + ","
	}
	repeatedStringForParts += "}"
	s := strings.Join([]string{`&Artifact{`,
		`ArtifactId:` + fmt.Sprintf("%v", this.ArtifactId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Parts:` + repeatedStringForParts + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Struct", "structpb.Struct", 1) + `,`,
		`Extensions:` + fmt.Sprintf("%v", this.Extensions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskStatusUpdateEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskStatusUpdateEvent{`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`ContextId:` + fmt.Sprintf("%v", this.ContextId) + `,`,
		`Status:` + strings.Replace(this.Status.String(), "TaskStatus", "TaskStatus", 1) + `,`,
		`Final:` + fmt.Sprintf("%v", this.Final) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Struct", "structpb.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskArtifactUpdateEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskArtifactUpdateEvent{`,
		`TaskId:` + fmt.Sprintf("%v", this.TaskId) + `,`,
		`ContextId:` + fmt.Sprintf("%v", this.ContextId) + `,`,
		`Artifact:` + strings.Replace(this.Artifact.String(), "Artifact", "Artifact", 1) + `,`,
		`Append:` + fmt.Sprintf("%v", this.Append) + `,`,
		`LastChunk:` + fmt.Sprintf("%v", this.LastChunk) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Struct", "structpb.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushNotificationConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushNotificationConfig{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`Authentication:` + strings.Replace(this.Authentication.String(), "AuthenticationInfo", "AuthenticationInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthenticationInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthenticationInfo{`,
		`Schemes:` + fmt.Sprintf("%v", this.Schemes) + `,`,
		`Credentials:` + fmt.Sprintf("%v", this.Credentials) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentInterface) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentInterface{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Transport:` + fmt.Sprintf("%v", this.Transport) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentCard) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSecurity := "[]*Security{"
	for _, f := range this.Security {
		repeatedStringForSecurity += strings.Replace(f.String(), "Security", "Security", 1) + ","
	}
	repeatedStringForSecurity += "}"
	repeatedStringForSkills := "[]*AgentSkill{"
	for _, f := range this.Skills {
		repeatedStringForSkills += strings.Replace(f.String(), "AgentSkill", "AgentSkill", 1) + ","
	}
	repeatedStringForSkills += "}"
	repeatedStringForAdditionalInterfaces := "[]*AgentInterface{"
	for _, f := range this.AdditionalInterfaces {
		repeatedStringForAdditionalInterfaces += strings.Replace(f.String(), "AgentInterface", "AgentInterface", 1) + ","
	}
	repeatedStringForAdditionalInterfaces += "}"
	keysForSecuritySchemes := make([]string, 0, len(this.SecuritySchemes))
	for k, _ := range this.SecuritySchemes {
		keysForSecuritySchemes = append(keysForSecuritySchemes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSecuritySchemes)
	mapStringForSecuritySchemes := "map[string]*SecurityScheme{"
	for _, k := range keysForSecuritySchemes {
		mapStringForSecuritySchemes += fmt.Sprintf("%v: %v,", k, this.SecuritySchemes[k])
	}
	mapStringForSecuritySchemes += "}"
	s := strings.Join([]string{`&AgentCard{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Provider:` + strings.Replace(this.Provider.String(), "AgentProvider", "AgentProvider", 1) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`DocumentationUrl:` + fmt.Sprintf("%v", this.DocumentationUrl) + `,`,
		`Capabilities:` + strings.Replace(this.Capabilities.String(), "AgentCapabilities", "AgentCapabilities", 1) + `,`,
		`SecuritySchemes:` + mapStringForSecuritySchemes + `,`,
		`Security:` + repeatedStringForSecurity + `,`,
		`DefaultInputModes:` + fmt.Sprintf("%v", this.DefaultInputModes) + `,`,
		`DefaultOutputModes:` + fmt.Sprintf("%v", this.DefaultOutputModes) + `,`,
		`Skills:` + repeatedStringForSkills + `,`,
		`SupportsAuthenticatedExtendedCard:` + fmt.Sprintf("%v", this.SupportsAuthenticatedExtendedCard) + `,`,
		`PreferredTransport:` + fmt.Sprintf("%v", this.PreferredTransport) + `,`,
		`AdditionalInterfaces:` + repeatedStringForAdditionalInterfaces + `,`,
		`ProtocolVersion:` + fmt.Sprintf("%v", this.ProtocolVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentProvider{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Organization:` + fmt.Sprintf("%v", this.Organization) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentCapabilities) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForExtensions := "[]*AgentExtension{"
	for _, f := range this.Extensions {
		repeatedStringForExtensions += strings.Replace(f.String(), "AgentExtension", "AgentExtension", 1) + ","
	}
	repeatedStringForExtensions += "}"
	s := strings.Join([]string{`&AgentCapabilities{`,
		`Streaming:` + fmt.Sprintf("%v", this.Streaming) + `,`,
		`PushNotifications:` + fmt.Sprintf("%v", this.PushNotifications) + `,`,
		`Extensions:` + repeatedStringForExtensions + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentExtension) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentExtension{`,
		`Uri:` + fmt.Sprintf("%v", this.Uri) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Required:` + fmt.Sprintf("%v", this.Required) + `,`,
		`Params:` + strings.Replace(fmt.Sprintf("%v", this.Params), "Struct", "structpb.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AgentSkill) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AgentSkill{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`Examples:` + fmt.Sprintf("%v", this.Examples) + `,`,
		`InputModes:` + fmt.Sprintf("%v", this.InputModes) + `,`,
		`OutputModes:` + fmt.Sprintf("%v", this.OutputModes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskPushNotificationConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskPushNotificationConfig{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`PushNotificationConfig:` + strings.Replace(this.PushNotificationConfig.String(), "PushNotificationConfig", "PushNotificationConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StringList) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StringList{`,
		`List:` + fmt.Sprintf("%v", this.List) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Security) String() string {
	if this == nil {
		return "nil"
	}
	keysForSchemes := make([]string, 0, len(this.Schemes))
	for k, _ := range this.Schemes {
		keysForSchemes = append(keysForSchemes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSchemes)
	mapStringForSchemes := "map[string]*StringList{"
	for _, k := range keysForSchemes {
		mapStringForSchemes += fmt.Sprintf("%v: %v,", k, this.Schemes[k])
	}
	mapStringForSchemes += "}"
	s := strings.Join([]string{`&Security{`,
		`Schemes:` + mapStringForSchemes + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityScheme) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityScheme{`,
		`Scheme:` + fmt.Sprintf("%v", this.Scheme) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityScheme_ApiKeySecurityScheme) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityScheme_ApiKeySecurityScheme{`,
		`ApiKeySecurityScheme:` + strings.Replace(fmt.Sprintf("%v", this.ApiKeySecurityScheme), "APIKeySecurityScheme", "APIKeySecurityScheme", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityScheme_HttpAuthSecurityScheme) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityScheme_HttpAuthSecurityScheme{`,
		`HttpAuthSecurityScheme:` + strings.Replace(fmt.Sprintf("%v", this.HttpAuthSecurityScheme), "HTTPAuthSecurityScheme", "HTTPAuthSecurityScheme", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityScheme_Oauth2SecurityScheme) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityScheme_Oauth2SecurityScheme{`,
		`Oauth2SecurityScheme:` + strings.Replace(fmt.Sprintf("%v", this.Oauth2SecurityScheme), "OAuth2SecurityScheme", "OAuth2SecurityScheme", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SecurityScheme_OpenIdConnectSecurityScheme) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SecurityScheme_OpenIdConnectSecurityScheme{`,
		`OpenIdConnectSecurityScheme:` + strings.Replace(fmt.Sprintf("%v", this.OpenIdConnectSecurityScheme), "OpenIdConnectSecurityScheme", "OpenIdConnectSecurityScheme", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *APIKeySecurityScheme) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&APIKeySecurityScheme{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HTTPAuthSecurityScheme) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPAuthSecurityScheme{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Scheme:` + fmt.Sprintf("%v", this.Scheme) + `,`,
		`BearerFormat:` + fmt.Sprintf("%v", this.BearerFormat) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuth2SecurityScheme) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuth2SecurityScheme{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Flows:` + strings.Replace(this.Flows.String(), "OAuthFlows", "OAuthFlows", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenIdConnectSecurityScheme) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenIdConnectSecurityScheme{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`OpenIdConnectUrl:` + fmt.Sprintf("%v", this.OpenIdConnectUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuthFlows) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuthFlows{`,
		`Flow:` + fmt.Sprintf("%v", this.Flow) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuthFlows_AuthorizationCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuthFlows_AuthorizationCode{`,
		`AuthorizationCode:` + strings.Replace(fmt.Sprintf("%v", this.AuthorizationCode), "AuthorizationCodeOAuthFlow", "AuthorizationCodeOAuthFlow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuthFlows_ClientCredentials) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuthFlows_ClientCredentials{`,
		`ClientCredentials:` + strings.Replace(fmt.Sprintf("%v", this.ClientCredentials), "ClientCredentialsOAuthFlow", "ClientCredentialsOAuthFlow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuthFlows_Implicit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuthFlows_Implicit{`,
		`Implicit:` + strings.Replace(fmt.Sprintf("%v", this.Implicit), "ImplicitOAuthFlow", "ImplicitOAuthFlow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OAuthFlows_Password) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OAuthFlows_Password{`,
		`Password:` + strings.Replace(fmt.Sprintf("%v", this.Password), "PasswordOAuthFlow", "PasswordOAuthFlow", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizationCodeOAuthFlow) String() string {
	if this == nil {
		return "nil"
	}
	keysForScopes := make([]string, 0, len(this.Scopes))
	for k, _ := range this.Scopes {
		keysForScopes = append(keysForScopes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScopes)
	mapStringForScopes := "map[string]string{"
	for _, k := range keysForScopes {
		mapStringForScopes += fmt.Sprintf("%v: %v,", k, this.Scopes[k])
	}
	mapStringForScopes += "}"
	s := strings.Join([]string{`&AuthorizationCodeOAuthFlow{`,
		`AuthorizationUrl:` + fmt.Sprintf("%v", this.AuthorizationUrl) + `,`,
		`TokenUrl:` + fmt.Sprintf("%v", this.TokenUrl) + `,`,
		`RefreshUrl:` + fmt.Sprintf("%v", this.RefreshUrl) + `,`,
		`Scopes:` + mapStringForScopes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClientCredentialsOAuthFlow) String() string {
	if this == nil {
		return "nil"
	}
	keysForScopes := make([]string, 0, len(this.Scopes))
	for k, _ := range this.Scopes {
		keysForScopes = append(keysForScopes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScopes)
	mapStringForScopes := "map[string]string{"
	for _, k := range keysForScopes {
		mapStringForScopes += fmt.Sprintf("%v: %v,", k, this.Scopes[k])
	}
	mapStringForScopes += "}"
	s := strings.Join([]string{`&ClientCredentialsOAuthFlow{`,
		`TokenUrl:` + fmt.Sprintf("%v", this.TokenUrl) + `,`,
		`RefreshUrl:` + fmt.Sprintf("%v", this.RefreshUrl) + `,`,
		`Scopes:` + mapStringForScopes + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImplicitOAuthFlow) String() string {
	if this == nil {
		return "nil"
	}
	keysForScopes := make([]string, 0, len(this.Scopes))
	for k, _ := range this.Scopes {
		keysForScopes = append(keysForScopes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScopes)
	mapStringForScopes := "map[string]string{"
	for _, k := range keysForScopes {
		mapStringForScopes += fmt.Sprintf("%v: %v,", k, this.Scopes[k])
	}
	mapStringForScopes += "}"
	s := strings.Join([]string{`&ImplicitOAuthFlow{`,
		`AuthorizationUrl:` + fmt.Sprintf("%v", this.AuthorizationUrl) + `,`,
		`RefreshUrl:` + fmt.Sprintf("%v", this.RefreshUrl) + `,`,
		`Scopes:` + mapStringForScopes + `,`,
		`}`,
	}, "")
	return s
}
func (this *PasswordOAuthFlow) String() string {
	if this == nil {
		return "nil"
	}
	keysForScopes := make([]string, 0, len(this.Scopes))
	for k, _ := range this.Scopes {
		keysForScopes = append(keysForScopes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForScopes)
	mapStringForScopes := "map[string]string{"
	for _, k := range keysForScopes {
		mapStringForScopes += fmt.Sprintf("%v: %v,", k, this.Scopes[k])
	}
	mapStringForScopes += "}"
	s := strings.Join([]string{`&PasswordOAuthFlow{`,
		`TokenUrl:` + fmt.Sprintf("%v", this.TokenUrl) + `,`,
		`RefreshUrl:` + fmt.Sprintf("%v", this.RefreshUrl) + `,`,
		`Scopes:` + mapStringForScopes + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageRequest{`,
		`Request:` + strings.Replace(this.Request.String(), "Message", "Message", 1) + `,`,
		`Configuration:` + strings.Replace(this.Configuration.String(), "SendMessageConfiguration", "SendMessageConfiguration", 1) + `,`,
		`Metadata:` + strings.Replace(fmt.Sprintf("%v", this.Metadata), "Struct", "structpb.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTaskRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`HistoryLength:` + fmt.Sprintf("%v", this.HistoryLength) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelTaskRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelTaskRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTaskPushNotificationConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTaskPushNotificationConfigRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteTaskPushNotificationConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteTaskPushNotificationConfigRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTaskPushNotificationConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTaskPushNotificationConfigRequest{`,
		`Parent:` + fmt.Sprintf("%v", this.Parent) + `,`,
		`ConfigId:` + fmt.Sprintf("%v", this.ConfigId) + `,`,
		`Config:` + strings.Replace(this.Config.String(), "TaskPushNotificationConfig", "TaskPushNotificationConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskSubscriptionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TaskSubscriptionRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTaskPushNotificationConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTaskPushNotificationConfigRequest{`,
		`Parent:` + fmt.Sprintf("%v", this.Parent) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageToken:` + fmt.Sprintf("%v", this.PageToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAgentCardRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAgentCardRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageResponse{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageResponse_Task) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageResponse_Task{`,
		`Task:` + strings.Replace(fmt.Sprintf("%v", this.Task), "Task", "Task", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageResponse_Msg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageResponse_Msg{`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamResponse{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamResponse_Task) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamResponse_Task{`,
		`Task:` + strings.Replace(fmt.Sprintf("%v", this.Task), "Task", "Task", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamResponse_Msg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamResponse_Msg{`,
		`Msg:` + strings.Replace(fmt.Sprintf("%v", this.Msg), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamResponse_StatusUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamResponse_StatusUpdate{`,
		`StatusUpdate:` + strings.Replace(fmt.Sprintf("%v", this.StatusUpdate), "TaskStatusUpdateEvent", "TaskStatusUpdateEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamResponse_ArtifactUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamResponse_ArtifactUpdate{`,
		`ArtifactUpdate:` + strings.Replace(fmt.Sprintf("%v", this.ArtifactUpdate), "TaskArtifactUpdateEvent", "TaskArtifactUpdateEvent", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTaskPushNotificationConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConfigs := "[]*TaskPushNotificationConfig{"
	for _, f := range this.Configs {
		repeatedStringForConfigs += strings.Replace(f.String(), "TaskPushNotificationConfig", "TaskPushNotificationConfig", 1) + ","
	}
	repeatedStringForConfigs += "}"
	s := strings.Join([]string{`&ListTaskPushNotificationConfigResponse{`,
		`Configs:` + repeatedStringForConfigs + `,`,
		`NextPageToken:` + fmt.Sprintf("%v", this.NextPageToken) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringA2A(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SendMessageConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedOutputModes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedOutputModes = append(m.AcceptedOutputModes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushNotification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PushNotification == nil {
				m.PushNotification = &PushNotificationConfig{}
			}
			if err := m.PushNotification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryLength", wireType)
			}
			m.HistoryLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocking", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blocking = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &TaskStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Artifacts = append(m.Artifacts, &Artifact{})
			if err := m.Artifacts[len(m.Artifacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &Message{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &structpb.Struct{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TaskState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &Message{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &timestamppb.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Part) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Part: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Part: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Part = &Part_Text{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FilePart{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Part = &Part_File{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataPart{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Part = &Part_Data{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FilePart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FilePart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FilePart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileWithUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.File = &FilePart_FileWithUri{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileWithBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.File = &FilePart_FileWithBytes{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataPart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &structpb.Struct{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= Role(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content, &Part{})
			if err := m.Content[len(m.Content)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &structpb.Struct{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Artifact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Artifact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Artifact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArtifactId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parts = append(m.Parts, &Part{})
			if err := m.Parts[len(m.Parts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &structpb.Struct{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskStatusUpdateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskStatusUpdateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskStatusUpdateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &TaskStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Final = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &structpb.Struct{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskArtifactUpdateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskArtifactUpdateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskArtifactUpdateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Artifact", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Artifact == nil {
				m.Artifact = &Artifact{}
			}
			if err := m.Artifact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Append", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Append = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChunk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastChunk = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &structpb.Struct{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushNotificationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushNotificationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushNotificationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Authentication == nil {
				m.Authentication = &AuthenticationInfo{}
			}
			if err := m.Authentication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schemes = append(m.Schemes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentInterface) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentInterface: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentInterface: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Provider == nil {
				m.Provider = &AgentProvider{}
			}
			if err := m.Provider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Capabilities == nil {
				m.Capabilities = &AgentCapabilities{}
			}
			if err := m.Capabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecuritySchemes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecuritySchemes == nil {
				m.SecuritySchemes = make(map[string]*SecurityScheme)
			}
			var mapkey string
			var mapvalue *SecurityScheme
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowA2A
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthA2A
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthA2A
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SecurityScheme{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipA2A(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthA2A
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SecuritySchemes[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Security = append(m.Security, &Security{})
			if err := m.Security[len(m.Security)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInputModes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultInputModes = append(m.DefaultInputModes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultOutputModes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultOutputModes = append(m.DefaultOutputModes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skills = append(m.Skills, &AgentSkill{})
			if err := m.Skills[len(m.Skills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportsAuthenticatedExtendedCard", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SupportsAuthenticatedExtendedCard = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreferredTransport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreferredTransport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalInterfaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalInterfaces = append(m.AdditionalInterfaces, &AgentInterface{})
			if err := m.AdditionalInterfaces[len(m.AdditionalInterfaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organization = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentCapabilities) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentCapabilities: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentCapabilities: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streaming", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Streaming = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushNotifications", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PushNotifications = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, &AgentExtension{})
			if err := m.Extensions[len(m.Extensions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Required", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Required = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &structpb.Struct{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AgentSkill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentSkill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentSkill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Examples", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Examples = append(m.Examples, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputModes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputModes = append(m.InputModes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputModes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputModes = append(m.OutputModes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskPushNotificationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskPushNotificationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskPushNotificationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushNotificationConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PushNotificationConfig == nil {
				m.PushNotificationConfig = &PushNotificationConfig{}
			}
			if err := m.PushNotificationConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StringList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Security) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Security: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Security: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schemes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schemes == nil {
				m.Schemes = make(map[string]*StringList)
			}
			var mapkey string
			var mapvalue *StringList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowA2A
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthA2A
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthA2A
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StringList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipA2A(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthA2A
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Schemes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityScheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityScheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityScheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKeySecurityScheme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &APIKeySecurityScheme{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Scheme = &SecurityScheme_ApiKeySecurityScheme{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpAuthSecurityScheme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HTTPAuthSecurityScheme{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Scheme = &SecurityScheme_HttpAuthSecurityScheme{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oauth2SecurityScheme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OAuth2SecurityScheme{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Scheme = &SecurityScheme_Oauth2SecurityScheme{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenIdConnectSecurityScheme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenIdConnectSecurityScheme{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Scheme = &SecurityScheme_OpenIdConnectSecurityScheme{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIKeySecurityScheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIKeySecurityScheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIKeySecurityScheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HTTPAuthSecurityScheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPAuthSecurityScheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPAuthSecurityScheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BearerFormat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuth2SecurityScheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuth2SecurityScheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuth2SecurityScheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Flows == nil {
				m.Flows = &OAuthFlows{}
			}
			if err := m.Flows.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenIdConnectSecurityScheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenIdConnectSecurityScheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenIdConnectSecurityScheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenIdConnectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenIdConnectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OAuthFlows) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OAuthFlows: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OAuthFlows: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationCode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthorizationCodeOAuthFlow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Flow = &OAuthFlows_AuthorizationCode{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClientCredentialsOAuthFlow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Flow = &OAuthFlows_ClientCredentials{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Implicit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ImplicitOAuthFlow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Flow = &OAuthFlows_Implicit{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PasswordOAuthFlow{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Flow = &OAuthFlows_Password{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizationCodeOAuthFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizationCodeOAuthFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizationCodeOAuthFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scopes == nil {
				m.Scopes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowA2A
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipA2A(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthA2A
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Scopes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientCredentialsOAuthFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientCredentialsOAuthFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientCredentialsOAuthFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scopes == nil {
				m.Scopes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowA2A
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipA2A(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthA2A
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Scopes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImplicitOAuthFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImplicitOAuthFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImplicitOAuthFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scopes == nil {
				m.Scopes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowA2A
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipA2A(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthA2A
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Scopes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordOAuthFlow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordOAuthFlow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordOAuthFlow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scopes == nil {
				m.Scopes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowA2A
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowA2A
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthA2A
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthA2A
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipA2A(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthA2A
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Scopes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &Message{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &SendMessageConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &structpb.Struct{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryLength", wireType)
			}
			m.HistoryLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTaskPushNotificationConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTaskPushNotificationConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTaskPushNotificationConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTaskPushNotificationConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTaskPushNotificationConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTaskPushNotificationConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTaskPushNotificationConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTaskPushNotificationConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTaskPushNotificationConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &TaskPushNotificationConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskPushNotificationConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskPushNotificationConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskPushNotificationConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAgentCardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAgentCardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAgentCardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Task{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &SendMessageResponse_Task{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Message{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &SendMessageResponse_Msg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Task{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &StreamResponse_Task{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Message{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &StreamResponse_Msg{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TaskStatusUpdateEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &StreamResponse_StatusUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArtifactUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TaskArtifactUpdateEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &StreamResponse_ArtifactUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTaskPushNotificationConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTaskPushNotificationConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTaskPushNotificationConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configs = append(m.Configs, &TaskPushNotificationConfig{})
			if err := m.Configs[len(m.Configs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2A
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2A
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2A(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthA2A
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipA2A(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowA2A
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowA2A
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthA2A
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupA2A
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthA2A
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthA2A        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowA2A          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupA2A = fmt.Errorf("proto: unexpected end of group")
)
