// Copyright 2025 The A2A Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package a2asrv

import (
	"context"
)

type callContextKey struct{}

// CallContextFrom allows to get a CallContext struct which holds additional information
// about the current execution scope.
func CallContextFrom(ctx context.Context) (*CallContext, bool) {
	callCtx, ok := ctx.Value(callContextKey{}).(*CallContext)
	return callCtx, ok
}

// WithCallContext can be called by a transport implementation to provide request metadata to RequestHandler
// or to have access to the list of activated extensions after the call ends.
// If context already had a CallContext attached it will be shadowed.
func WithCallContext(ctx context.Context, meta *RequestMeta) (context.Context, *CallContext) {
	callCtx := &CallContext{User: unauthenticatedUser{}, requestMeta: meta}
	return context.WithValue(ctx, callContextKey{}, callCtx), callCtx
}

// CallContext holds information about the current server call scope.
type CallContext struct {
	method              string
	requestMeta         *RequestMeta
	activatedExtensions []string

	// User can be set by authentication middleware to provide information about
	// the user who initiated the request.
	User User
}

// Method returns the name of the RequestHandler method which is being executed.
func (cc *CallContext) Method() string {
	return cc.method
}

// RequestMeta returns metadata of the request which created the call context.
func (cc *CallContext) RequestMeta() *RequestMeta {
	return cc.requestMeta
}

// Extensions returns a struct which provides an API for working with extensions in the current call context.
func (cc *CallContext) Extensions() *Extensions {
	return &Extensions{callCtx: cc}
}

// Request represents a transport-agnostic request received by the A2A server.
// Payload is one of a2a package core types.
type Request struct {
	Payload any
}

// Response represents a transport-agnostic response generated by the A2A server.
// Payload is one of a2a package core types.
type Response struct {
	Payload any
	Err     error
}

// CallInterceptor can be attached to an a2asrv.RequestHandler. If multiple interceptors are added:
//   - Before will be executed in the order of attachment sequentially.
//   - After will be executed in the reverse order sequentially.
type CallInterceptor interface {
	// Before allows to observe, modify or reject a Request.
	// A new context.Context can be returned to pass information to one of the extension points.
	Before(ctx context.Context, callCtx *CallContext, req *Request) (context.Context, error)

	// After allows to observe, modify or reject a Response.
	After(ctx context.Context, callCtx *CallContext, resp *Response) error
}

// PassthroughInterceptor can be used by CallInterceptor implementers who don't need all methods.
// The struct can be embedded for providing a no-op implementation.
type PassthroughCallInterceptor struct{}

func (PassthroughCallInterceptor) Before(ctx context.Context, callCtx *CallContext, req *Request) (context.Context, error) {
	return ctx, nil
}

func (PassthroughCallInterceptor) After(ctx context.Context, callCtx *CallContext, resp *Response) error {
	return nil
}
