// Copyright 2025 The A2A Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package a2a

import "time"

// Represents a response for non-streaming message send.
type SendMessageResult interface {
	isSendMessageResult()
}

func (Task) isSendMessageResult()    {}
func (Message) isSendMessageResult() {}

// Event interface is used to represent types that can be sent over a streaming connection.
type Event interface {
	isEvent()
}

func (t Message) isEvent()                 {}
func (t Task) isEvent()                    {}
func (t TaskStatusUpdateEvent) isEvent()   {}
func (t TaskArtifactUpdateEvent) isEvent() {}

type MessageRole string

const (
	MessageRoleAgent MessageRole = "agent"
	MessageRoleUser  MessageRole = "user"
)

// Represents a single message in the conversation between a user and an agent.
type Message struct {
	// The context identifier for this message, used to group related interactions.
	ContextID *string

	// The URIs of extensions that are relevant to this message.
	Extensions []string

	// The type of this object, used as a discriminator. Always 'message' for a
	// Message.
	Kind string

	// A unique identifier for the message, typically a UUID, generated by the sender.
	MessageID string

	// Optional metadata for extensions. The key is an extension-specific identifier.
	Metadata map[string]any

	// An array of content parts that form the message body. A message can be
	// composed of multiple parts of different types (e.g., text and files).
	Parts []Part

	// A list of other task IDs that this message references for additional context.
	ReferenceTasks []TaskID

	// Identifies the sender of the message.
	// service.
	Role MessageRole

	// The identifier of the task this message is part of. Can be omitted for the
	// first message of a new task.
	TaskID *TaskID
}

type TaskID string

type TaskState string

const (
	TaskStateAuthRequired  TaskState = "auth-required"
	TaskStateCanceled      TaskState = "canceled"
	TaskStateCompleted     TaskState = "completed"
	TaskStateFailed        TaskState = "failed"
	TaskStateInputRequired TaskState = "input-required"
	TaskStateRejected      TaskState = "rejected"
	TaskStateSubmitted     TaskState = "submitted"
	TaskStateUnknown       TaskState = "unknown"
	TaskStateWorking       TaskState = "working"
)

// Represents a single, stateful operation or conversation between a client and an
// agent.
type Task struct {
	// A collection of artifacts generated by the agent during the execution of the
	// task.
	Artifacts []Artifact

	// A server-generated identifier for maintaining context across multiple related
	// tasks or interactions.
	ContextID string

	// An array of messages exchanged during the task, representing the conversation
	// history.
	History []Message

	// A unique identifier for the task, generated by the server for a new task.
	ID TaskID

	// The type of this object, used as a discriminator. Always 'task' for a Task.
	Kind string

	// Optional metadata for extensions. The key is an extension-specific identifier.
	Metadata map[string]any

	// The current status of the task, including its state and a descriptive message.
	Status TaskStatus
}

// Represents the status of a task at a specific point in time.
type TaskStatus struct {
	// An optional, human-readable message providing more details about the current
	// status.
	Message *Message

	// The current state of the task's lifecycle.
	State TaskState

	// A datetime indicating when this status was recorded.
	Timestamp *time.Time
}

// Represents a file, data structure, or other resource generated by an agent
// during a task.
type Artifact struct {
	// A unique identifier for the artifact within the scope of the task.
	ArtifactID string

	// An optional, human-readable description of the artifact.
	Description *string

	// The URIs of extensions that are relevant to this artifact.
	Extensions []string

	// Optional metadata for extensions. The key is an extension-specific identifier.
	Metadata map[string]any

	// An optional, human-readable name for the artifact.
	Name *string

	// An array of content parts that make up the artifact.
	Parts []Part
}

// An event sent by the agent to notify the client that an artifact has been
// generated or updated. This is typically used in streaming models.
type TaskArtifactUpdateEvent struct {
	// If true, the content of this artifact should be appended to a previously sent
	// artifact with the same ID.
	Append *bool

	// The artifact that was generated or updated.
	Artifact Artifact

	// The context ID associated with the task.
	ContextID string

	// The type of this event, used as a discriminator. Always 'artifact-update'.
	Kind string

	// If true, this is the final chunk of the artifact.
	LastChunk *bool

	// The ID of the task this artifact belongs to.
	TaskID TaskID

	// Optional metadata for extensions.
	Metadata map[string]any
}

// An event sent by the agent to notify the client of a change in a task's status.
// This is typically used in streaming or subscription models.
type TaskStatusUpdateEvent struct {
	// The context ID associated with the task.
	ContextID string

	// If true, this is the final event in the stream for this interaction.
	Final bool

	// The type of this event, used as a discriminator. Always 'status-update'.
	Kind string

	// The new status of the task.
	Status TaskStatus

	// The ID of the task that was updated.
	TaskID TaskID

	// Optional metadata for extensions.
	Metadata map[string]any
}

// A discriminated union representing a part of a message or artifact, which can
// be text, a file, or structured data.
type Part interface {
	isPart()
}

func (TextPart) isPart() {}
func (FilePart) isPart() {}
func (DataPart) isPart() {}

// Represents a text segment within a message or artifact.
type TextPart struct {
	// The type of this part, used as a discriminator. Always 'text'.
	Kind string

	// The string content of the text part.
	Text string

	// Optional metadata associated with this part.
	Metadata map[string]any
}

// Represents a structured data segment (e.g., JSON) within a message or artifact.
type DataPart struct {
	// The structured data content.
	Data map[string]any

	// The type of this part, used as a discriminator. Always 'data'.
	Kind string

	// Optional metadata associated with this part.
	Metadata map[string]any
}

// Represents a file segment within a message or artifact. The file content can be
// provided either directly as bytes or as a URI.
type FilePart struct {
	// The file content, represented as either a URI or as base64-encoded bytes.
	File FilePartFile

	// The type of this part, used as a discriminator. Always 'file'.
	Kind string

	// Optional metadata associated with this part.
	Metadata map[string]any
}

// Represents a file with its content provided directly as a base64-encoded string.
type FilePartFile struct {
	// The base64-encoded content of the file.
	Bytes string

	// The MIME type of the file (e.g., "application/pdf").
	MimeType *string

	// An optional name for the file (e.g., "document.pdf").
	Name *string

	// A URL pointing to the file's content.
	URI string
}

// Represents a file with its content provided directly as a base64-encoded string.
type FileWithBytes struct {
	// The base64-encoded content of the file.
	Bytes string

	// The MIME type of the file (e.g., "application/pdf").
	MimeType *string

	// An optional name for the file (e.g., "document.pdf").
	Name *string
}

// Represents a file with its content located at a specific URI.
type FileWithURI struct {
	// The MIME type of the file (e.g., "application/pdf").
	MimeType *string

	// An optional name for the file (e.g., "document.pdf").
	Name *string

	// A URL pointing to the file's content.
	URI string
}

// Requests

// Defines parameters containing a task ID, used for simple task operations.
type TaskIDParams struct {
	// The unique identifier of the task.
	ID TaskID

	// Optional metadata associated with the request.
	Metadata map[string]any
}

// Defines parameters for querying a task, with an option to limit history length.
type TaskQueryParams struct {
	// The number of most recent messages from the task's history to retrieve.
	HistoryLength *int

	// The unique identifier of the task.
	ID TaskID

	// Optional metadata associated with the request.
	Metadata map[string]any
}

// Defines configuration options for a `message/send` or `message/stream` request.
type MessageSendConfig struct {
	// A list of output MIME types the client is prepared to accept in the response.
	AcceptedOutputModes []string

	// If true, the client will wait for the task to complete. The server may reject
	// this if the task is long-running.
	Blocking *bool

	// The number of most recent messages from the task's history to retrieve in the
	// response.
	HistoryLength *int

	// Configuration for the agent to send push notifications for updates after the
	// initial response.
	PushConfig *PushConfig
}

// Defines the parameters for a request to send a message to an agent. This can be used
// to create a new task, continue an existing one, or restart a task.
type MessageSendParams struct {
	// Optional configuration for the send request.
	Config *MessageSendConfig

	// The message object being sent to the agent.
	Message Message

	// Optional metadata for extensions.
	Metadata map[string]any
}
